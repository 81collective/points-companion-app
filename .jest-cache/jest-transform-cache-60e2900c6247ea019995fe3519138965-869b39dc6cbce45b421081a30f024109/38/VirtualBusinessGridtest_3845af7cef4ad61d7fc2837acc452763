e38e98ffda02f4fca9963fe695dd5ee4
"use strict";

var _react = _interopRequireDefault(require("react"));
var _testUtils = require("../testUtils");
var _VirtualBusinessGrid = _interopRequireDefault(require("../../components/common/VirtualBusinessGrid"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
// Setup mocks before tests
beforeAll(() => {
  (0, _testUtils.setupTests)();
});
describe('VirtualBusinessGrid', () => {
  const mockBusinesses = Array.from({
    length: 100
  }, (_, i) => (0, _testUtils.createMockBusiness)({
    id: `business-${i}`,
    name: `Test Business ${i}`,
    distance: i * 100
  }));
  const defaultProps = {
    businesses: mockBusinesses,
    selectedBusiness: null,
    onBusinessSelect: jest.fn()
  };
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it('renders business grid with correct number of visible items', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));
    await (0, _testUtils.waitFor)(() => {
      // Should render a subset of businesses (not all 100)
      const businessCards = _testUtils.screen.getAllByTestId(/^business-card-/);
      expect(businessCards.length).toBeGreaterThan(0);
      expect(businessCards.length).toBeLessThan(100);
    });
  });
  it('calls onBusinessSelect when business is clicked', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));
    await (0, _testUtils.waitFor)(() => {
      const firstBusinessCard = _testUtils.screen.getByTestId('business-card-business-0');
      firstBusinessCard.click();
    });
    expect(defaultProps.onBusinessSelect).toHaveBeenCalledWith(mockBusinesses[0]);
  });
  it('renders business information correctly', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));
    await (0, _testUtils.waitFor)(() => {
      expect(_testUtils.screen.getByText('Test Business 0')).toBeInTheDocument();
      const addressElements = _testUtils.screen.getAllByText('123 Test St');
      expect(addressElements.length).toBeGreaterThan(0);
    });
  });
  it('displays distance information', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));
    await (0, _testUtils.waitFor)(() => {
      // First business has distance 0, so it should show "0"
      expect(_testUtils.screen.getByText('0')).toBeInTheDocument();
    });
  });
  it('shows rating with stars', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));
    await (0, _testUtils.waitFor)(() => {
      const ratingElements = _testUtils.screen.getAllByText('4.5');
      expect(ratingElements.length).toBeGreaterThan(0);
    });
  });
  it('displays price level indicators', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));
    await (0, _testUtils.waitFor)(() => {
      // Price level is available in the business data but not visually displayed
      expect(_testUtils.screen.getByText('Test Business 0')).toBeInTheDocument();
    });
  });
  it('handles empty businesses array', () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, _extends({}, defaultProps, {
      businesses: []
    })));
    expect(_testUtils.screen.getByText('No businesses found in this area')).toBeInTheDocument();
  });
  it('calls onLoadMore when scrolling to bottom', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));

    // Simulate scroll to bottom
    const scrollContainer = _testUtils.screen.getByTestId('virtual-grid-container');
    _testUtils.fireEvent.scroll(scrollContainer, {
      target: {
        scrollTop: 1000
      }
    });

    // The component handles scrolling internally, no external onLoadMore callback
    await (0, _testUtils.waitFor)(() => {
      expect(scrollContainer).toBeInTheDocument();
    });
  });
  it('is accessible with proper ARIA labels', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));
    await (0, _testUtils.waitFor)(() => {
      const businessCards = _testUtils.screen.getAllByTestId(/^business-card-/);
      businessCards.forEach(card => {
        expect(card).toHaveAttribute('aria-label');
        expect(card).toHaveAttribute('role', 'button');
      });
    });
  });
  it('handles keyboard navigation', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));
    await (0, _testUtils.waitFor)(() => {
      const firstBusinessCard = _testUtils.screen.getByTestId('business-card-business-0');
      firstBusinessCard.focus();
      _testUtils.fireEvent.keyDown(firstBusinessCard, {
        key: 'Enter'
      });
    });
    expect(defaultProps.onBusinessSelect).toHaveBeenCalledWith(mockBusinesses[0]);
  });
  it('renders with responsive columns', () => {
    // Mock different screen sizes
    Object.defineProperty(window, 'innerWidth', {
      value: 768,
      writable: true
    });
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));

    // The component calculates columns based on screen size
    // For mobile (width < 768), it should use 1 column
    const grid = _testUtils.screen.getByTestId('virtual-grid-container');
    expect(grid).toBeInTheDocument();
  });
  it('memoizes business cards for performance', () => {
    const {
      rerender
    } = (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));

    // Re-render with same props
    rerender(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));

    // Business cards should be memoized and not re-render unnecessarily
    expect(_testUtils.screen.getByTestId('business-card-business-0')).toBeInTheDocument();
  });
  it('handles business selection with proper focus management', async () => {
    (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_VirtualBusinessGrid.default, defaultProps));
    await (0, _testUtils.waitFor)(() => {
      const firstBusinessCard = _testUtils.screen.getByTestId('business-card-business-0');
      firstBusinessCard.click();
    });
    expect(defaultProps.onBusinessSelect).toHaveBeenCalledWith(mockBusinesses[0]);
    // Focus should be managed properly
    expect(document.activeElement).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,