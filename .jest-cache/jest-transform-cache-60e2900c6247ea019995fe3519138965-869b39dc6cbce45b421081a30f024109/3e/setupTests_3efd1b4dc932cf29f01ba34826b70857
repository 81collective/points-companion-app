209e7a579478f3d264ab3a6886b07df9
"use strict";
// Jest setup file for comprehensive testing environment
// Configures mocks, utilities, and test environment
Object.defineProperty(exports, "__esModule", { value: true });
const testUtils_1 = require("./testUtils");
// Setup global test environment
(0, testUtils_1.setupTests)();
// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation(query => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: jest.fn(), // deprecated
        removeListener: jest.fn(), // deprecated
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn(),
    })),
});
// Mock window.ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn(),
}));
// Mock window.IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn(),
}));
// Mock navigator.geolocation
Object.defineProperty(navigator, 'geolocation', {
    value: {
        getCurrentPosition: jest.fn(),
        watchPosition: jest.fn(),
        clearWatch: jest.fn(),
    },
    writable: true,
});
// Mock navigator.serviceWorker
Object.defineProperty(navigator, 'serviceWorker', {
    value: {
        register: jest.fn(() => Promise.resolve({
            active: { state: 'activated' },
            waiting: null,
            installing: null,
        })),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
    },
    writable: true,
});
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
};
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock,
});
// Mock sessionStorage
const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
};
Object.defineProperty(window, 'sessionStorage', {
    value: sessionStorageMock,
});
// Mock Google Maps API
global.google = {
    maps: {
        Map: jest.fn(),
        Marker: jest.fn(),
        InfoWindow: jest.fn(),
        PlacesService: jest.fn(),
        PlacesServiceStatus: {
            OK: 'OK',
            ZERO_RESULTS: 'ZERO_RESULTS',
            OVER_QUERY_LIMIT: 'OVER_QUERY_LIMIT',
            REQUEST_DENIED: 'REQUEST_DENIED',
            INVALID_REQUEST: 'INVALID_REQUEST',
        },
    },
};
// Mock fetch API
global.fetch = jest.fn();
// Mock console methods for cleaner test output
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
beforeAll(() => {
    console.error = jest.fn();
    console.warn = jest.fn();
});
afterAll(() => {
    console.error = originalConsoleError;
    console.warn = originalConsoleWarn;
});
// Mock performance API
global.performance.mark = jest.fn();
global.performance.measure = jest.fn();
global.performance.getEntriesByName = jest.fn(() => []);
global.performance.clearMarks = jest.fn();
global.performance.clearMeasures = jest.fn();
// Mock requestAnimationFrame
global.requestAnimationFrame = jest.fn(cb => setTimeout(cb, 16));
global.cancelAnimationFrame = jest.fn();
// Mock requestIdleCallback
global.requestIdleCallback = jest.fn(cb => setTimeout(cb, 1));
global.cancelIdleCallback = jest.fn();
// Cleanup after each test
afterEach(() => {
    jest.clearAllMocks();
    jest.clearAllTimers();
});
// Global test utilities
global.testUtils = {
    // Helper to wait for async operations
    waitForAsync: () => new Promise(resolve => setImmediate(resolve)),
    // Helper to create mock promises
    createMockPromise: (value, delay = 0) => new Promise(resolve => setTimeout(() => resolve(value), delay)),
    // Helper to create mock rejections
    createMockRejection: (error, delay = 0) => new Promise((_, reject) => setTimeout(() => reject(error), delay)),
};
// Performance testing utilities
global.performanceUtils = {
    // Measure function execution time
    measureExecutionTime: async (fn) => {
        const start = performance.now();
        const result = await fn();
        const duration = performance.now() - start;
        return { result, duration };
    },
    // Assert performance threshold
    assertPerformance: (duration, threshold) => {
        if (duration > threshold) {
            throw new Error(`Performance test failed: ${duration}ms exceeded threshold of ${threshold}ms`);
        }
    },
};
// Memory testing utilities
global.memoryUtils = {
    // Get current memory usage
    getMemoryUsage: () => {
        if ('memory' in performance) {
            return performance.memory;
        }
        return null;
    },
    // Assert memory usage is within limits
    assertMemoryUsage: (maxHeapUsed) => {
        const memory = global.memoryUtils.getMemoryUsage();
        if (memory && memory.usedJSHeapSize > maxHeapUsed) {
            throw new Error(`Memory usage test failed: ${memory.usedJSHeapSize} exceeded limit of ${maxHeapUsed}`);
        }
    },
};
// Accessibility testing utilities
global.a11yUtils = {
    // Check if element has proper ARIA attributes
    hasAriaAttributes: (element) => {
        const ariaAttributes = [
            'aria-label',
            'aria-labelledby',
            'aria-describedby',
            'aria-expanded',
            'aria-selected',
            'role',
        ];
        return ariaAttributes.some(attr => element.hasAttribute(attr));
    },
    // Check if element is keyboard accessible
    isKeyboardAccessible: (element) => {
        const tabIndex = element.getAttribute('tabindex');
        const tagName = element.tagName.toLowerCase();
        return (tabIndex !== '-1' &&
            (tabIndex !== null || ['button', 'input', 'select', 'textarea', 'a'].includes(tagName)));
    },
};
// Network testing utilities
global.networkUtils = {
    // Mock successful API response
    mockApiSuccess: (data, status = 200) => {
        global.fetch.mockResolvedValueOnce({
            ok: true,
            status,
            json: () => Promise.resolve(data),
            text: () => Promise.resolve(JSON.stringify(data)),
        });
    },
    // Mock failed API response
    mockApiError: (error, status = 500) => {
        global.fetch.mockRejectedValueOnce(error);
    },
    // Mock network timeout
    mockNetworkTimeout: (delay = 5000) => {
        global.fetch.mockImplementationOnce(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Network timeout')), delay)));
    },
};
// Mock environment variables
delete process.env.NODE_ENV;
process.env.NODE_ENV = 'test';
process.env.REACT_APP_API_URL = 'http://localhost:3001';
process.env.REACT_APP_GOOGLE_MAPS_API_KEY = 'test-api-key';
global.testUtils = {
    // Helper to wait for async operations
    waitForAsync: () => new Promise(resolve => setImmediate(resolve)),
    // Helper to create mock promises
    createMockPromise: (value, delay = 0) => new Promise(resolve => setTimeout(() => resolve(value), delay)),
    // Helper to create mock rejections
    createMockRejection: (error, delay = 0) => new Promise((_, reject) => setTimeout(() => reject(error), delay)),
};
// Performance testing utilities
global.performanceUtils = {
    // Measure function execution time
    measureExecutionTime: async (fn) => {
        const start = performance.now();
        const result = await fn();
        const duration = performance.now() - start;
        return { result, duration };
    },
    // Assert performance threshold
    assertPerformance: (duration, threshold) => {
        if (duration > threshold) {
            throw new Error(`Performance test failed: ${duration}ms exceeded threshold of ${threshold}ms`);
        }
    },
};
// Memory testing utilities
global.memoryUtils = {
    // Get current memory usage
    getMemoryUsage: () => {
        if ('memory' in performance) {
            return performance.memory;
        }
        return null;
    },
    // Assert memory usage is within limits
    assertMemoryUsage: (maxHeapUsed) => {
        const memory = global.memoryUtils.getMemoryUsage();
        if (memory && memory.usedJSHeapSize > maxHeapUsed) {
            throw new Error(`Memory usage test failed: ${memory.usedJSHeapSize} exceeded limit of ${maxHeapUsed}`);
        }
    },
};
// Accessibility testing utilities
global.a11yUtils = {
    // Check if element has proper ARIA attributes
    hasAriaAttributes: (element) => {
        const ariaAttributes = [
            'aria-label',
            'aria-labelledby',
            'aria-describedby',
            'aria-expanded',
            'aria-selected',
            'role',
        ];
        return ariaAttributes.some(attr => element.hasAttribute(attr));
    },
    // Check if element is keyboard accessible
    isKeyboardAccessible: (element) => {
        const tabIndex = element.getAttribute('tabindex');
        const tagName = element.tagName.toLowerCase();
        return (tabIndex !== '-1' &&
            (tabIndex !== null || ['button', 'input', 'select', 'textarea', 'a'].includes(tagName)));
    },
};
// Network testing utilities
global.networkUtils = {
    // Mock successful API response
    mockApiSuccess: (data, status = 200) => {
        global.fetch.mockResolvedValueOnce({
            ok: true,
            status,
            json: () => Promise.resolve(data),
            text: () => Promise.resolve(JSON.stringify(data)),
        });
    },
    // Mock failed API response
    mockApiError: (error, status = 500) => {
        global.fetch.mockRejectedValueOnce(error);
    },
    // Mock network timeout
    mockNetworkTimeout: (delay = 5000) => {
        global.fetch.mockImplementationOnce(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Network timeout')), delay)));
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,