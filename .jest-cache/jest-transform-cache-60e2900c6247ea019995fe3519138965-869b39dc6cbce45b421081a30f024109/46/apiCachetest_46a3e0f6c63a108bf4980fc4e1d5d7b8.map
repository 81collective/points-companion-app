{"file":"C:\\Users\\Media Server\\Documents\\Projects\\points-companion-app\\src\\test\\lib\\apiCache.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Media Server\\Documents\\Projects\\points-companion-app\\src\\test\\lib\\apiCache.test.ts"],"sourcesContent":["import { advancedApiCache as apiCache } from '../../lib/apiCache';\r\n\r\n// Mock localStorage\r\nconst localStorageMock = {\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n  removeItem: jest.fn(),\r\n  clear: jest.fn(),\r\n};\r\n\r\nObject.defineProperty(window, 'localStorage', {\r\n  value: localStorageMock,\r\n});\r\n\r\ndescribe('apiCache', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Reset cache state\r\n    apiCache.clear();\r\n  });\r\n\r\n  describe('Basic Cache Operations', () => {\r\n    it('should store and retrieve data correctly', async () => {\r\n      const testData = { message: 'Hello World' };\r\n      const cacheKey = 'test-key';\r\n\r\n      await apiCache.set(cacheKey, testData);\r\n      const retrieved = await apiCache.get(cacheKey);\r\n\r\n      expect(retrieved).toEqual(testData);\r\n    });\r\n\r\n    it('should return null for non-existent keys', async () => {\r\n      const retrieved = await apiCache.get('non-existent-key');\r\n      expect(retrieved).toBeNull();\r\n    });\r\n\r\n    it('should handle cache expiration', async () => {\r\n      const testData = { message: 'Expires quickly' };\r\n      const cacheKey = 'expiring-key';\r\n\r\n      // Set with very short TTL (1ms)\r\n      await apiCache.set(cacheKey, testData, { ttl: 1 });\r\n\r\n      // Wait for expiration\r\n      await new Promise(resolve => setTimeout(resolve, 2));\r\n\r\n      const retrieved = await apiCache.get(cacheKey);\r\n      expect(retrieved).toBeNull();\r\n    });\r\n\r\n    it('should clear all cache entries', async () => {\r\n      await apiCache.set('key1', 'value1');\r\n      await apiCache.set('key2', 'value2');\r\n\r\n      apiCache.clear();\r\n\r\n      expect(await apiCache.get('key1')).toBeNull();\r\n      expect(await apiCache.get('key2')).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('LRU Eviction', () => {\r\n    it('should evict least recently used items when capacity is exceeded', async () => {\r\n      // Set a small capacity for testing\r\n      const originalCapacity = (apiCache as any).capacity;\r\n      (apiCache as any).capacity = 3;\r\n\r\n      await apiCache.set('key1', 'value1');\r\n      await apiCache.set('key2', 'value2');\r\n      await apiCache.set('key3', 'value3');\r\n      await apiCache.set('key4', 'value4'); // This should evict key1\r\n\r\n      expect(await apiCache.get('key1')).toBeNull();\r\n      expect(await apiCache.get('key2')).toEqual('value2');\r\n      expect(await apiCache.get('key3')).toEqual('value3');\r\n      expect(await apiCache.get('key4')).toEqual('value4');\r\n\r\n      // Restore original capacity\r\n      (apiCache as any).capacity = originalCapacity;\r\n    });\r\n\r\n    it('should update LRU order on access', async () => {\r\n      const originalCapacity = (apiCache as any).capacity;\r\n      (apiCache as any).capacity = 3;\r\n\r\n      await apiCache.set('key1', 'value1');\r\n      await apiCache.set('key2', 'value2');\r\n      await apiCache.set('key3', 'value3');\r\n\r\n      // Access key1 to make it most recently used\r\n      await apiCache.get('key1');\r\n\r\n      // Add key4, should evict key2 (least recently used)\r\n      await apiCache.set('key4', 'value4');\r\n\r\n      expect(await apiCache.get('key1')).toEqual('value1'); // Still there\r\n      expect(await apiCache.get('key2')).toBeNull(); // Evicted\r\n      expect(await apiCache.get('key3')).toEqual('value3');\r\n      expect(await apiCache.get('key4')).toEqual('value4');\r\n\r\n      (apiCache as any).capacity = originalCapacity;\r\n    });\r\n  });\r\n\r\n  describe('Cache Persistence', () => {\r\n    it('should persist cache to localStorage', async () => {\r\n      const testData = { persistent: true };\r\n\r\n      await apiCache.set('persistent-key', testData);\r\n\r\n      // Check that localStorage.setItem was called\r\n      expect(localStorageMock.setItem).toHaveBeenCalled();\r\n      const callArgs = localStorageMock.setItem.mock.calls.find(call =>\r\n        call[0] === 'api-cache-data'\r\n      );\r\n      expect(callArgs).toBeTruthy();\r\n    });\r\n\r\n    it('should load cache from localStorage on initialization', () => {\r\n      const mockCacheData = {\r\n        'loaded-key': {\r\n          data: 'loaded-value',\r\n          timestamp: Date.now(),\r\n          ttl: 3600000,\r\n        },\r\n      };\r\n\r\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(mockCacheData));\r\n\r\n      // Create new cache instance to test loading\r\n      const newCache = require('../../lib/apiCache').apiCache;\r\n\r\n      // The cache should have loaded the data\r\n      expect(localStorageMock.getItem).toHaveBeenCalledWith('api-cache-data');\r\n    });\r\n  });\r\n\r\n  describe('Cache Statistics', () => {\r\n    it('should track cache hits and misses', async () => {\r\n      await apiCache.set('stats-key', 'stats-value');\r\n\r\n      // Hit\r\n      await apiCache.get('stats-key');\r\n      // Miss\r\n      await apiCache.get('non-existent-key');\r\n\r\n      const stats = apiCache.getStats();\r\n      expect(stats.hits).toBe(1);\r\n      expect(stats.misses).toBe(1);\r\n      expect(apiCache.getHitRate()).toBe(0.5);\r\n    });\r\n\r\n    it('should track cache size and capacity', async () => {\r\n      await apiCache.set('size-key1', 'value1');\r\n      await apiCache.set('size-key2', 'value2');\r\n\r\n      const stats = apiCache.getStats();\r\n      expect(stats.size).toBeGreaterThan(0);\r\n      expect(stats.itemCount).toBe(2);\r\n    });\r\n  });\r\n\r\n  describe('Request Deduplication', () => {\r\n    it('should deduplicate concurrent requests for the same key', async () => {\r\n      let callCount = 0;\r\n      const mockFetcher = jest.fn(() => {\r\n        callCount++;\r\n        return Promise.resolve('fetched-data');\r\n      });\r\n\r\n      // Simulate concurrent requests\r\n      const promises = [\r\n        apiCache.dedupe('dedupe-key', mockFetcher),\r\n        apiCache.dedupe('dedupe-key', mockFetcher),\r\n        apiCache.dedupe('dedupe-key', mockFetcher),\r\n      ];\r\n\r\n      const results = await Promise.all(promises);\r\n\r\n      // All should return the same data\r\n      results.forEach((result: any) => {\r\n        expect(result).toBe('fetched-data');\r\n      });\r\n\r\n      // But fetcher should only be called once\r\n      expect(callCount).toBe(1);\r\n    });\r\n\r\n    it('should handle fetch errors gracefully', async () => {\r\n      const mockFetcher = jest.fn(() => Promise.reject(new Error('Fetch failed')));\r\n\r\n      await expect(\r\n        apiCache.dedupe('error-key', mockFetcher)\r\n      ).rejects.toThrow('Fetch failed');\r\n\r\n      // Should not cache the error\r\n      expect(await apiCache.get('error-key')).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Tag-based Invalidation', () => {\r\n    it('should invalidate entries by tag', async () => {\r\n      await apiCache.set('tagged-key1', 'value1', { tags: ['tag1'] });\r\n      await apiCache.set('tagged-key2', 'value2', { tags: ['tag1', 'tag2'] });\r\n      await apiCache.set('untagged-key', 'value3');\r\n\r\n      apiCache.clearByTags(['tag1']);\r\n\r\n      expect(await apiCache.get('tagged-key1')).toBeNull();\r\n      expect(await apiCache.get('tagged-key2')).toBeNull();\r\n      expect(await apiCache.get('untagged-key')).toEqual('value3');\r\n    });\r\n\r\n    it('should handle multiple tags correctly', async () => {\r\n      await apiCache.set('multi-key', 'value', { tags: ['tag1', 'tag2', 'tag3'] });\r\n\r\n      apiCache.clearByTags(['tag2']);\r\n\r\n      expect(await apiCache.get('multi-key')).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Performance and Memory Management', () => {\r\n    it('should handle large datasets efficiently', async () => {\r\n      const largeData = Array.from({ length: 1000 }, (_, i) => ({\r\n        id: i,\r\n        data: 'x'.repeat(1000), // 1KB per item\r\n      }));\r\n\r\n      const startTime = performance.now();\r\n\r\n      for (let i = 0; i < largeData.length; i++) {\r\n        await apiCache.set(`large-key-${i}`, largeData[i]);\r\n      }\r\n\r\n      const endTime = performance.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // Should complete within reasonable time (adjust threshold as needed)\r\n      expect(duration).toBeLessThan(5000); // 5 seconds max\r\n\r\n      // Should be able to retrieve items\r\n      const retrieved = await apiCache.get('large-key-500');\r\n      expect(retrieved).toEqual(largeData[500]);\r\n    });\r\n\r\n    it('should maintain performance under concurrent load', async () => {\r\n      const concurrentOperations = 100;\r\n      const promises = [];\r\n\r\n      for (let i = 0; i < concurrentOperations; i++) {\r\n        promises.push(apiCache.set(`concurrent-key-${i}`, `value-${i}`));\r\n      }\r\n\r\n      const startTime = performance.now();\r\n      await Promise.all(promises);\r\n      const endTime = performance.now();\r\n\r\n      expect(endTime - startTime).toBeLessThan(2000); // 2 seconds max\r\n\r\n      // Verify all operations completed\r\n      for (let i = 0; i < concurrentOperations; i++) {\r\n        const value = await apiCache.get(`concurrent-key-${i}`);\r\n        expect(value).toBe(`value-${i}`);\r\n      }\r\n    });\r\n  });\r\n});\r\n"],"version":3}