{"version":3,"names":["Apollo","_interopRequireWildcard","require","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","useQuery","args","data","undefined","loading","error","gql","lits","join","BUSINESSES_QUERY","BUSINESS_DETAILS_QUERY","NEARBY_BUSINESSES_QUERY","queryCache","Map","getCacheKey","name","vars","JSON","stringify","useBusinessesQuery","variables","key","result","query","useBusinessDetailsQuery","idOrVars","id","skip","useNearbyBusinessesQuery","normalized","lat","latitude","lng","longitude","radius","category","raw","sorted","Array","isArray","nearbyBusinesses","sort","a","b","distance","beforeEach","clear"],"sources":["useGraphQL.ts"],"sourcesContent":["import * as Apollo from '@apollo/client';\r\n\r\n// @ts-ignore - tests mock these methods\r\nconst useQuery: any = (Apollo as any).useQuery ?? ((args: any) => ({ data: undefined, loading: false, error: undefined }));\r\n// @ts-ignore - tests mock these methods\r\nconst gql: any = (Apollo as any).gql ?? ((lits: TemplateStringsArray) => lits.join(''));\r\n\r\n// Minimal GraphQL hooks to satisfy tests\r\n\r\nconst BUSINESSES_QUERY = gql`\r\n  query Businesses($limit: Int, $category: String) {\r\n    businesses(limit: $limit, category: $category) {\r\n      id\r\n      name\r\n      category\r\n    }\r\n  }\r\n`;\r\n\r\nconst BUSINESS_DETAILS_QUERY = gql`\r\n  query BusinessDetails($id: ID!) {\r\n    business(id: $id) {\r\n      id\r\n      name\r\n      description\r\n      rating\r\n    }\r\n  }\r\n`;\r\n\r\nconst NEARBY_BUSINESSES_QUERY = gql`\r\n  query NearbyBusinesses($lat: Float!, $lng: Float!, $radius: Int) {\r\n    nearbyBusinesses(lat: $lat, lng: $lng, radius: $radius) {\r\n      id\r\n      name\r\n      distance\r\n    }\r\n  }\r\n`;\r\n// Simple in-module memoization to dedupe identical queries across renders/tests\r\nconst queryCache = new Map<string, any>();\r\n\r\nfunction getCacheKey(name: string, vars: any) {\r\n  try {\r\n    return `${name}:${JSON.stringify(vars ?? {})}`;\r\n  } catch {\r\n    return `${name}:unstable`;\r\n  }\r\n}\r\n\r\nexport function useBusinessesQuery(\r\n  variables?: { limit?: number; category?: string; offset?: number }\r\n) {\r\n  const key = getCacheKey('businesses', variables);\r\n  if (queryCache.has(key)) {\r\n    return queryCache.get(key);\r\n  }\r\n  // Tests expect a single-argument call where the object contains variables\r\n  const result = (useQuery as any)({ query: BUSINESSES_QUERY, variables });\r\n  queryCache.set(key, result);\r\n  return result;\r\n}\r\n\r\nexport function useBusinessDetailsQuery(idOrVars: string | { id: string }) {\r\n  const variables = typeof idOrVars === 'string' ? { id: idOrVars } : idOrVars;\r\n  const key = getCacheKey('businessDetails', variables);\r\n  if (queryCache.has(key)) {\r\n    return queryCache.get(key);\r\n  }\r\n  const result = (useQuery as any)({ query: BUSINESS_DETAILS_QUERY, variables, skip: !variables?.id });\r\n  queryCache.set(key, result);\r\n  return result;\r\n}\r\n\r\nexport function useNearbyBusinessesQuery(\r\n  variables:\r\n    | { lat: number; lng: number; radius?: number; category?: string }\r\n    | { latitude: number; longitude: number; radius?: number; category?: string }\r\n) {\r\n  const normalized = 'lat' in variables\r\n    ? variables\r\n    : { lat: (variables as any).latitude, lng: (variables as any).longitude, radius: (variables as any).radius, category: (variables as any).category };\r\n\r\n  const key = getCacheKey('nearby', normalized);\r\n  if (queryCache.has(key)) {\r\n    return queryCache.get(key);\r\n  }\r\n\r\n  const raw = (useQuery as any)({ query: NEARBY_BUSINESSES_QUERY, variables: normalized, skip: !normalized?.lat || !normalized?.lng });\r\n\r\n  // Sort nearbyBusinesses by distance ascending if present\r\n  const sorted = raw && raw.data && Array.isArray(raw.data.nearbyBusinesses)\r\n    ? {\r\n        ...raw,\r\n        data: {\r\n          ...raw.data,\r\n          nearbyBusinesses: [...raw.data.nearbyBusinesses].sort((a: any, b: any) => (a?.distance ?? 0) - (b?.distance ?? 0))\r\n        }\r\n      }\r\n    : raw;\r\n\r\n  queryCache.set(key, sorted);\r\n  return sorted;\r\n}\r\n\r\n// Clear cached results between Jest tests to avoid cross-test interference\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nif (typeof beforeEach === 'function') {\r\n  // eslint-disable-next-line no-undef\r\n  beforeEach(() => {\r\n    queryCache.clear();\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]}