846a2a24db5968fcedf7a7d3627f5b0b
"use strict";

var _apiCache = require("../../lib/apiCache");
// Mock localStorage
const localStorageMock = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock
});
describe('apiCache', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    // Reset cache state
    _apiCache.advancedApiCache.clear();
  });
  describe('Basic Cache Operations', () => {
    it('should store and retrieve data correctly', async () => {
      const testData = {
        message: 'Hello World'
      };
      const cacheKey = 'test-key';
      await _apiCache.advancedApiCache.set(cacheKey, testData);
      const retrieved = await _apiCache.advancedApiCache.get(cacheKey);
      expect(retrieved).toEqual(testData);
    });
    it('should return null for non-existent keys', async () => {
      const retrieved = await _apiCache.advancedApiCache.get('non-existent-key');
      expect(retrieved).toBeNull();
    });
    it('should handle cache expiration', async () => {
      const testData = {
        message: 'Expires quickly'
      };
      const cacheKey = 'expiring-key';

      // Set with very short TTL (1ms)
      await _apiCache.advancedApiCache.set(cacheKey, testData, {
        ttl: 1
      });

      // Wait for expiration
      await new Promise(resolve => setTimeout(resolve, 2));
      const retrieved = await _apiCache.advancedApiCache.get(cacheKey);
      expect(retrieved).toBeNull();
    });
    it('should clear all cache entries', async () => {
      await _apiCache.advancedApiCache.set('key1', 'value1');
      await _apiCache.advancedApiCache.set('key2', 'value2');
      _apiCache.advancedApiCache.clear();
      expect(await _apiCache.advancedApiCache.get('key1')).toBeNull();
      expect(await _apiCache.advancedApiCache.get('key2')).toBeNull();
    });
  });
  describe('LRU Eviction', () => {
    it('should evict least recently used items when capacity is exceeded', async () => {
      // Set a small capacity for testing
      const originalCapacity = _apiCache.advancedApiCache.capacity;
      _apiCache.advancedApiCache.capacity = 3;
      await _apiCache.advancedApiCache.set('key1', 'value1');
      await _apiCache.advancedApiCache.set('key2', 'value2');
      await _apiCache.advancedApiCache.set('key3', 'value3');
      await _apiCache.advancedApiCache.set('key4', 'value4'); // This should evict key1

      expect(await _apiCache.advancedApiCache.get('key1')).toBeNull();
      expect(await _apiCache.advancedApiCache.get('key2')).toEqual('value2');
      expect(await _apiCache.advancedApiCache.get('key3')).toEqual('value3');
      expect(await _apiCache.advancedApiCache.get('key4')).toEqual('value4');

      // Restore original capacity
      _apiCache.advancedApiCache.capacity = originalCapacity;
    });
    it('should update LRU order on access', async () => {
      const originalCapacity = _apiCache.advancedApiCache.capacity;
      _apiCache.advancedApiCache.capacity = 3;
      await _apiCache.advancedApiCache.set('key1', 'value1');
      await _apiCache.advancedApiCache.set('key2', 'value2');
      await _apiCache.advancedApiCache.set('key3', 'value3');

      // Access key1 to make it most recently used
      await _apiCache.advancedApiCache.get('key1');

      // Add key4, should evict key2 (least recently used)
      await _apiCache.advancedApiCache.set('key4', 'value4');
      expect(await _apiCache.advancedApiCache.get('key1')).toEqual('value1'); // Still there
      expect(await _apiCache.advancedApiCache.get('key2')).toBeNull(); // Evicted
      expect(await _apiCache.advancedApiCache.get('key3')).toEqual('value3');
      expect(await _apiCache.advancedApiCache.get('key4')).toEqual('value4');
      _apiCache.advancedApiCache.capacity = originalCapacity;
    });
  });
  describe('Cache Persistence', () => {
    it('should persist cache to localStorage', async () => {
      const testData = {
        persistent: true
      };
      await _apiCache.advancedApiCache.set('persistent-key', testData);

      // Check that localStorage.setItem was called
      expect(localStorageMock.setItem).toHaveBeenCalled();
      const callArgs = localStorageMock.setItem.mock.calls.find(call => call[0] === 'api-cache-data');
      expect(callArgs).toBeTruthy();
    });
    it('should load cache from localStorage on initialization', () => {
      const mockCacheData = {
        'loaded-key': {
          data: 'loaded-value',
          timestamp: Date.now(),
          ttl: 3600000
        }
      };
      localStorageMock.getItem.mockReturnValue(JSON.stringify(mockCacheData));

      // Create new cache instance to test loading
      const newCache = require('../../lib/apiCache').apiCache;

      // The cache should have loaded the data
      expect(localStorageMock.getItem).toHaveBeenCalledWith('api-cache-data');
    });
  });
  describe('Cache Statistics', () => {
    it('should track cache hits and misses', async () => {
      await _apiCache.advancedApiCache.set('stats-key', 'stats-value');

      // Hit
      await _apiCache.advancedApiCache.get('stats-key');
      // Miss
      await _apiCache.advancedApiCache.get('non-existent-key');
      const stats = _apiCache.advancedApiCache.getStats();
      expect(stats.hits).toBe(1);
      expect(stats.misses).toBe(1);
      expect(_apiCache.advancedApiCache.getHitRate()).toBe(0.5);
    });
    it('should track cache size and capacity', async () => {
      await _apiCache.advancedApiCache.set('size-key1', 'value1');
      await _apiCache.advancedApiCache.set('size-key2', 'value2');
      const stats = _apiCache.advancedApiCache.getStats();
      expect(stats.size).toBeGreaterThan(0);
      expect(stats.itemCount).toBe(2);
    });
  });
  describe('Request Deduplication', () => {
    it('should deduplicate concurrent requests for the same key', async () => {
      let callCount = 0;
      const mockFetcher = jest.fn(() => {
        callCount++;
        return Promise.resolve('fetched-data');
      });

      // Simulate concurrent requests
      const promises = [_apiCache.advancedApiCache.dedupe('dedupe-key', mockFetcher), _apiCache.advancedApiCache.dedupe('dedupe-key', mockFetcher), _apiCache.advancedApiCache.dedupe('dedupe-key', mockFetcher)];
      const results = await Promise.all(promises);

      // All should return the same data
      results.forEach(result => {
        expect(result).toBe('fetched-data');
      });

      // But fetcher should only be called once
      expect(callCount).toBe(1);
    });
    it('should handle fetch errors gracefully', async () => {
      const mockFetcher = jest.fn(() => Promise.reject(new Error('Fetch failed')));
      await expect(_apiCache.advancedApiCache.dedupe('error-key', mockFetcher)).rejects.toThrow('Fetch failed');

      // Should not cache the error
      expect(await _apiCache.advancedApiCache.get('error-key')).toBeNull();
    });
  });
  describe('Tag-based Invalidation', () => {
    it('should invalidate entries by tag', async () => {
      await _apiCache.advancedApiCache.set('tagged-key1', 'value1', {
        tags: ['tag1']
      });
      await _apiCache.advancedApiCache.set('tagged-key2', 'value2', {
        tags: ['tag1', 'tag2']
      });
      await _apiCache.advancedApiCache.set('untagged-key', 'value3');
      _apiCache.advancedApiCache.clearByTags(['tag1']);
      expect(await _apiCache.advancedApiCache.get('tagged-key1')).toBeNull();
      expect(await _apiCache.advancedApiCache.get('tagged-key2')).toBeNull();
      expect(await _apiCache.advancedApiCache.get('untagged-key')).toEqual('value3');
    });
    it('should handle multiple tags correctly', async () => {
      await _apiCache.advancedApiCache.set('multi-key', 'value', {
        tags: ['tag1', 'tag2', 'tag3']
      });
      _apiCache.advancedApiCache.clearByTags(['tag2']);
      expect(await _apiCache.advancedApiCache.get('multi-key')).toBeNull();
    });
  });
  describe('Performance and Memory Management', () => {
    it('should handle large datasets efficiently', async () => {
      const largeData = Array.from({
        length: 1000
      }, (_, i) => ({
        id: i,
        data: 'x'.repeat(1000) // 1KB per item
      }));
      const startTime = performance.now();
      for (let i = 0; i < largeData.length; i++) {
        await _apiCache.advancedApiCache.set(`large-key-${i}`, largeData[i]);
      }
      const endTime = performance.now();
      const duration = endTime - startTime;

      // Should complete within reasonable time (adjust threshold as needed)
      expect(duration).toBeLessThan(5000); // 5 seconds max

      // Should be able to retrieve items
      const retrieved = await _apiCache.advancedApiCache.get('large-key-500');
      expect(retrieved).toEqual(largeData[500]);
    });
    it('should maintain performance under concurrent load', async () => {
      const concurrentOperations = 100;
      const promises = [];
      for (let i = 0; i < concurrentOperations; i++) {
        promises.push(_apiCache.advancedApiCache.set(`concurrent-key-${i}`, `value-${i}`));
      }
      const startTime = performance.now();
      await Promise.all(promises);
      const endTime = performance.now();
      expect(endTime - startTime).toBeLessThan(2000); // 2 seconds max

      // Verify all operations completed
      for (let i = 0; i < concurrentOperations; i++) {
        const value = await _apiCache.advancedApiCache.get(`concurrent-key-${i}`);
        expect(value).toBe(`value-${i}`);
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXBpQ2FjaGUiLCJyZXF1aXJlIiwibG9jYWxTdG9yYWdlTW9jayIsImdldEl0ZW0iLCJqZXN0IiwiZm4iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ2YWx1ZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJhcGlDYWNoZSIsIml0IiwidGVzdERhdGEiLCJtZXNzYWdlIiwiY2FjaGVLZXkiLCJzZXQiLCJyZXRyaWV2ZWQiLCJnZXQiLCJleHBlY3QiLCJ0b0VxdWFsIiwidG9CZU51bGwiLCJ0dGwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJvcmlnaW5hbENhcGFjaXR5IiwiY2FwYWNpdHkiLCJwZXJzaXN0ZW50IiwidG9IYXZlQmVlbkNhbGxlZCIsImNhbGxBcmdzIiwibW9jayIsImNhbGxzIiwiZmluZCIsImNhbGwiLCJ0b0JlVHJ1dGh5IiwibW9ja0NhY2hlRGF0YSIsImRhdGEiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwibW9ja1JldHVyblZhbHVlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5ld0NhY2hlIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJzdGF0cyIsImdldFN0YXRzIiwiaGl0cyIsInRvQmUiLCJtaXNzZXMiLCJnZXRIaXRSYXRlIiwic2l6ZSIsInRvQmVHcmVhdGVyVGhhbiIsIml0ZW1Db3VudCIsImNhbGxDb3VudCIsIm1vY2tGZXRjaGVyIiwicHJvbWlzZXMiLCJkZWR1cGUiLCJyZXN1bHRzIiwiYWxsIiwiZm9yRWFjaCIsInJlc3VsdCIsInJlamVjdCIsIkVycm9yIiwicmVqZWN0cyIsInRvVGhyb3ciLCJ0YWdzIiwiY2xlYXJCeVRhZ3MiLCJsYXJnZURhdGEiLCJBcnJheSIsImZyb20iLCJsZW5ndGgiLCJfIiwiaSIsImlkIiwicmVwZWF0Iiwic3RhcnRUaW1lIiwicGVyZm9ybWFuY2UiLCJlbmRUaW1lIiwiZHVyYXRpb24iLCJ0b0JlTGVzc1RoYW4iLCJjb25jdXJyZW50T3BlcmF0aW9ucyIsInB1c2giXSwic291cmNlcyI6WyJhcGlDYWNoZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkdmFuY2VkQXBpQ2FjaGUgYXMgYXBpQ2FjaGUgfSBmcm9tICcuLi8uLi9saWIvYXBpQ2FjaGUnO1xyXG5cclxuLy8gTW9jayBsb2NhbFN0b3JhZ2VcclxuY29uc3QgbG9jYWxTdG9yYWdlTW9jayA9IHtcclxuICBnZXRJdGVtOiBqZXN0LmZuKCksXHJcbiAgc2V0SXRlbTogamVzdC5mbigpLFxyXG4gIHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcclxuICBjbGVhcjogamVzdC5mbigpLFxyXG59O1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2xvY2FsU3RvcmFnZScsIHtcclxuICB2YWx1ZTogbG9jYWxTdG9yYWdlTW9jayxcclxufSk7XHJcblxyXG5kZXNjcmliZSgnYXBpQ2FjaGUnLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICAgIC8vIFJlc2V0IGNhY2hlIHN0YXRlXHJcbiAgICBhcGlDYWNoZS5jbGVhcigpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQmFzaWMgQ2FjaGUgT3BlcmF0aW9ucycsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgc3RvcmUgYW5kIHJldHJpZXZlIGRhdGEgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCB0ZXN0RGF0YSA9IHsgbWVzc2FnZTogJ0hlbGxvIFdvcmxkJyB9O1xyXG4gICAgICBjb25zdCBjYWNoZUtleSA9ICd0ZXN0LWtleSc7XHJcblxyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoY2FjaGVLZXksIHRlc3REYXRhKTtcclxuICAgICAgY29uc3QgcmV0cmlldmVkID0gYXdhaXQgYXBpQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcclxuXHJcbiAgICAgIGV4cGVjdChyZXRyaWV2ZWQpLnRvRXF1YWwodGVzdERhdGEpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gbnVsbCBmb3Igbm9uLWV4aXN0ZW50IGtleXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJldHJpZXZlZCA9IGF3YWl0IGFwaUNhY2hlLmdldCgnbm9uLWV4aXN0ZW50LWtleScpO1xyXG4gICAgICBleHBlY3QocmV0cmlldmVkKS50b0JlTnVsbCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2FjaGUgZXhwaXJhdGlvbicsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgdGVzdERhdGEgPSB7IG1lc3NhZ2U6ICdFeHBpcmVzIHF1aWNrbHknIH07XHJcbiAgICAgIGNvbnN0IGNhY2hlS2V5ID0gJ2V4cGlyaW5nLWtleSc7XHJcblxyXG4gICAgICAvLyBTZXQgd2l0aCB2ZXJ5IHNob3J0IFRUTCAoMW1zKVxyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoY2FjaGVLZXksIHRlc3REYXRhLCB7IHR0bDogMSB9KTtcclxuXHJcbiAgICAgIC8vIFdhaXQgZm9yIGV4cGlyYXRpb25cclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIpKTtcclxuXHJcbiAgICAgIGNvbnN0IHJldHJpZXZlZCA9IGF3YWl0IGFwaUNhY2hlLmdldChjYWNoZUtleSk7XHJcbiAgICAgIGV4cGVjdChyZXRyaWV2ZWQpLnRvQmVOdWxsKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIGNsZWFyIGFsbCBjYWNoZSBlbnRyaWVzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoJ2tleTEnLCAndmFsdWUxJyk7XHJcbiAgICAgIGF3YWl0IGFwaUNhY2hlLnNldCgna2V5MicsICd2YWx1ZTInKTtcclxuXHJcbiAgICAgIGFwaUNhY2hlLmNsZWFyKCk7XHJcblxyXG4gICAgICBleHBlY3QoYXdhaXQgYXBpQ2FjaGUuZ2V0KCdrZXkxJykpLnRvQmVOdWxsKCk7XHJcbiAgICAgIGV4cGVjdChhd2FpdCBhcGlDYWNoZS5nZXQoJ2tleTInKSkudG9CZU51bGwoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnTFJVIEV2aWN0aW9uJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBldmljdCBsZWFzdCByZWNlbnRseSB1c2VkIGl0ZW1zIHdoZW4gY2FwYWNpdHkgaXMgZXhjZWVkZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIC8vIFNldCBhIHNtYWxsIGNhcGFjaXR5IGZvciB0ZXN0aW5nXHJcbiAgICAgIGNvbnN0IG9yaWdpbmFsQ2FwYWNpdHkgPSAoYXBpQ2FjaGUgYXMgYW55KS5jYXBhY2l0eTtcclxuICAgICAgKGFwaUNhY2hlIGFzIGFueSkuY2FwYWNpdHkgPSAzO1xyXG5cclxuICAgICAgYXdhaXQgYXBpQ2FjaGUuc2V0KCdrZXkxJywgJ3ZhbHVlMScpO1xyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoJ2tleTInLCAndmFsdWUyJyk7XHJcbiAgICAgIGF3YWl0IGFwaUNhY2hlLnNldCgna2V5MycsICd2YWx1ZTMnKTtcclxuICAgICAgYXdhaXQgYXBpQ2FjaGUuc2V0KCdrZXk0JywgJ3ZhbHVlNCcpOyAvLyBUaGlzIHNob3VsZCBldmljdCBrZXkxXHJcblxyXG4gICAgICBleHBlY3QoYXdhaXQgYXBpQ2FjaGUuZ2V0KCdrZXkxJykpLnRvQmVOdWxsKCk7XHJcbiAgICAgIGV4cGVjdChhd2FpdCBhcGlDYWNoZS5nZXQoJ2tleTInKSkudG9FcXVhbCgndmFsdWUyJyk7XHJcbiAgICAgIGV4cGVjdChhd2FpdCBhcGlDYWNoZS5nZXQoJ2tleTMnKSkudG9FcXVhbCgndmFsdWUzJyk7XHJcbiAgICAgIGV4cGVjdChhd2FpdCBhcGlDYWNoZS5nZXQoJ2tleTQnKSkudG9FcXVhbCgndmFsdWU0Jyk7XHJcblxyXG4gICAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIGNhcGFjaXR5XHJcbiAgICAgIChhcGlDYWNoZSBhcyBhbnkpLmNhcGFjaXR5ID0gb3JpZ2luYWxDYXBhY2l0eTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdXBkYXRlIExSVSBvcmRlciBvbiBhY2Nlc3MnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG9yaWdpbmFsQ2FwYWNpdHkgPSAoYXBpQ2FjaGUgYXMgYW55KS5jYXBhY2l0eTtcclxuICAgICAgKGFwaUNhY2hlIGFzIGFueSkuY2FwYWNpdHkgPSAzO1xyXG5cclxuICAgICAgYXdhaXQgYXBpQ2FjaGUuc2V0KCdrZXkxJywgJ3ZhbHVlMScpO1xyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoJ2tleTInLCAndmFsdWUyJyk7XHJcbiAgICAgIGF3YWl0IGFwaUNhY2hlLnNldCgna2V5MycsICd2YWx1ZTMnKTtcclxuXHJcbiAgICAgIC8vIEFjY2VzcyBrZXkxIHRvIG1ha2UgaXQgbW9zdCByZWNlbnRseSB1c2VkXHJcbiAgICAgIGF3YWl0IGFwaUNhY2hlLmdldCgna2V5MScpO1xyXG5cclxuICAgICAgLy8gQWRkIGtleTQsIHNob3VsZCBldmljdCBrZXkyIChsZWFzdCByZWNlbnRseSB1c2VkKVxyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoJ2tleTQnLCAndmFsdWU0Jyk7XHJcblxyXG4gICAgICBleHBlY3QoYXdhaXQgYXBpQ2FjaGUuZ2V0KCdrZXkxJykpLnRvRXF1YWwoJ3ZhbHVlMScpOyAvLyBTdGlsbCB0aGVyZVxyXG4gICAgICBleHBlY3QoYXdhaXQgYXBpQ2FjaGUuZ2V0KCdrZXkyJykpLnRvQmVOdWxsKCk7IC8vIEV2aWN0ZWRcclxuICAgICAgZXhwZWN0KGF3YWl0IGFwaUNhY2hlLmdldCgna2V5MycpKS50b0VxdWFsKCd2YWx1ZTMnKTtcclxuICAgICAgZXhwZWN0KGF3YWl0IGFwaUNhY2hlLmdldCgna2V5NCcpKS50b0VxdWFsKCd2YWx1ZTQnKTtcclxuXHJcbiAgICAgIChhcGlDYWNoZSBhcyBhbnkpLmNhcGFjaXR5ID0gb3JpZ2luYWxDYXBhY2l0eTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnQ2FjaGUgUGVyc2lzdGVuY2UnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIHBlcnNpc3QgY2FjaGUgdG8gbG9jYWxTdG9yYWdlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCB0ZXN0RGF0YSA9IHsgcGVyc2lzdGVudDogdHJ1ZSB9O1xyXG5cclxuICAgICAgYXdhaXQgYXBpQ2FjaGUuc2V0KCdwZXJzaXN0ZW50LWtleScsIHRlc3REYXRhKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIHRoYXQgbG9jYWxTdG9yYWdlLnNldEl0ZW0gd2FzIGNhbGxlZFxyXG4gICAgICBleHBlY3QobG9jYWxTdG9yYWdlTW9jay5zZXRJdGVtKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICAgIGNvbnN0IGNhbGxBcmdzID0gbG9jYWxTdG9yYWdlTW9jay5zZXRJdGVtLm1vY2suY2FsbHMuZmluZChjYWxsID0+XHJcbiAgICAgICAgY2FsbFswXSA9PT0gJ2FwaS1jYWNoZS1kYXRhJ1xyXG4gICAgICApO1xyXG4gICAgICBleHBlY3QoY2FsbEFyZ3MpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgbG9hZCBjYWNoZSBmcm9tIGxvY2FsU3RvcmFnZSBvbiBpbml0aWFsaXphdGlvbicsICgpID0+IHtcclxuICAgICAgY29uc3QgbW9ja0NhY2hlRGF0YSA9IHtcclxuICAgICAgICAnbG9hZGVkLWtleSc6IHtcclxuICAgICAgICAgIGRhdGE6ICdsb2FkZWQtdmFsdWUnLFxyXG4gICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgdHRsOiAzNjAwMDAwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBsb2NhbFN0b3JhZ2VNb2NrLmdldEl0ZW0ubW9ja1JldHVyblZhbHVlKEpTT04uc3RyaW5naWZ5KG1vY2tDYWNoZURhdGEpKTtcclxuXHJcbiAgICAgIC8vIENyZWF0ZSBuZXcgY2FjaGUgaW5zdGFuY2UgdG8gdGVzdCBsb2FkaW5nXHJcbiAgICAgIGNvbnN0IG5ld0NhY2hlID0gcmVxdWlyZSgnLi4vLi4vbGliL2FwaUNhY2hlJykuYXBpQ2FjaGU7XHJcblxyXG4gICAgICAvLyBUaGUgY2FjaGUgc2hvdWxkIGhhdmUgbG9hZGVkIHRoZSBkYXRhXHJcbiAgICAgIGV4cGVjdChsb2NhbFN0b3JhZ2VNb2NrLmdldEl0ZW0pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdhcGktY2FjaGUtZGF0YScpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdDYWNoZSBTdGF0aXN0aWNzJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCB0cmFjayBjYWNoZSBoaXRzIGFuZCBtaXNzZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IGFwaUNhY2hlLnNldCgnc3RhdHMta2V5JywgJ3N0YXRzLXZhbHVlJyk7XHJcblxyXG4gICAgICAvLyBIaXRcclxuICAgICAgYXdhaXQgYXBpQ2FjaGUuZ2V0KCdzdGF0cy1rZXknKTtcclxuICAgICAgLy8gTWlzc1xyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5nZXQoJ25vbi1leGlzdGVudC1rZXknKTtcclxuXHJcbiAgICAgIGNvbnN0IHN0YXRzID0gYXBpQ2FjaGUuZ2V0U3RhdHMoKTtcclxuICAgICAgZXhwZWN0KHN0YXRzLmhpdHMpLnRvQmUoMSk7XHJcbiAgICAgIGV4cGVjdChzdGF0cy5taXNzZXMpLnRvQmUoMSk7XHJcbiAgICAgIGV4cGVjdChhcGlDYWNoZS5nZXRIaXRSYXRlKCkpLnRvQmUoMC41KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgdHJhY2sgY2FjaGUgc2l6ZSBhbmQgY2FwYWNpdHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IGFwaUNhY2hlLnNldCgnc2l6ZS1rZXkxJywgJ3ZhbHVlMScpO1xyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoJ3NpemUta2V5MicsICd2YWx1ZTInKTtcclxuXHJcbiAgICAgIGNvbnN0IHN0YXRzID0gYXBpQ2FjaGUuZ2V0U3RhdHMoKTtcclxuICAgICAgZXhwZWN0KHN0YXRzLnNpemUpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxuICAgICAgZXhwZWN0KHN0YXRzLml0ZW1Db3VudCkudG9CZSgyKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnUmVxdWVzdCBEZWR1cGxpY2F0aW9uJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBkZWR1cGxpY2F0ZSBjb25jdXJyZW50IHJlcXVlc3RzIGZvciB0aGUgc2FtZSBrZXknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGxldCBjYWxsQ291bnQgPSAwO1xyXG4gICAgICBjb25zdCBtb2NrRmV0Y2hlciA9IGplc3QuZm4oKCkgPT4ge1xyXG4gICAgICAgIGNhbGxDb3VudCsrO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJ2ZldGNoZWQtZGF0YScpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFNpbXVsYXRlIGNvbmN1cnJlbnQgcmVxdWVzdHNcclxuICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXHJcbiAgICAgICAgYXBpQ2FjaGUuZGVkdXBlKCdkZWR1cGUta2V5JywgbW9ja0ZldGNoZXIpLFxyXG4gICAgICAgIGFwaUNhY2hlLmRlZHVwZSgnZGVkdXBlLWtleScsIG1vY2tGZXRjaGVyKSxcclxuICAgICAgICBhcGlDYWNoZS5kZWR1cGUoJ2RlZHVwZS1rZXknLCBtb2NrRmV0Y2hlciksXHJcbiAgICAgIF07XHJcblxyXG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG5cclxuICAgICAgLy8gQWxsIHNob3VsZCByZXR1cm4gdGhlIHNhbWUgZGF0YVxyXG4gICAgICByZXN1bHRzLmZvckVhY2goKHJlc3VsdDogYW55KSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnZmV0Y2hlZC1kYXRhJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQnV0IGZldGNoZXIgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uY2VcclxuICAgICAgZXhwZWN0KGNhbGxDb3VudCkudG9CZSgxKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGZldGNoIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBtb2NrRmV0Y2hlciA9IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdGZXRjaCBmYWlsZWQnKSkpO1xyXG5cclxuICAgICAgYXdhaXQgZXhwZWN0KFxyXG4gICAgICAgIGFwaUNhY2hlLmRlZHVwZSgnZXJyb3Ita2V5JywgbW9ja0ZldGNoZXIpXHJcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdGZXRjaCBmYWlsZWQnKTtcclxuXHJcbiAgICAgIC8vIFNob3VsZCBub3QgY2FjaGUgdGhlIGVycm9yXHJcbiAgICAgIGV4cGVjdChhd2FpdCBhcGlDYWNoZS5nZXQoJ2Vycm9yLWtleScpKS50b0JlTnVsbCgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdUYWctYmFzZWQgSW52YWxpZGF0aW9uJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBpbnZhbGlkYXRlIGVudHJpZXMgYnkgdGFnJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoJ3RhZ2dlZC1rZXkxJywgJ3ZhbHVlMScsIHsgdGFnczogWyd0YWcxJ10gfSk7XHJcbiAgICAgIGF3YWl0IGFwaUNhY2hlLnNldCgndGFnZ2VkLWtleTInLCAndmFsdWUyJywgeyB0YWdzOiBbJ3RhZzEnLCAndGFnMiddIH0pO1xyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoJ3VudGFnZ2VkLWtleScsICd2YWx1ZTMnKTtcclxuXHJcbiAgICAgIGFwaUNhY2hlLmNsZWFyQnlUYWdzKFsndGFnMSddKTtcclxuXHJcbiAgICAgIGV4cGVjdChhd2FpdCBhcGlDYWNoZS5nZXQoJ3RhZ2dlZC1rZXkxJykpLnRvQmVOdWxsKCk7XHJcbiAgICAgIGV4cGVjdChhd2FpdCBhcGlDYWNoZS5nZXQoJ3RhZ2dlZC1rZXkyJykpLnRvQmVOdWxsKCk7XHJcbiAgICAgIGV4cGVjdChhd2FpdCBhcGlDYWNoZS5nZXQoJ3VudGFnZ2VkLWtleScpKS50b0VxdWFsKCd2YWx1ZTMnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG11bHRpcGxlIHRhZ3MgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBhcGlDYWNoZS5zZXQoJ211bHRpLWtleScsICd2YWx1ZScsIHsgdGFnczogWyd0YWcxJywgJ3RhZzInLCAndGFnMyddIH0pO1xyXG5cclxuICAgICAgYXBpQ2FjaGUuY2xlYXJCeVRhZ3MoWyd0YWcyJ10pO1xyXG5cclxuICAgICAgZXhwZWN0KGF3YWl0IGFwaUNhY2hlLmdldCgnbXVsdGkta2V5JykpLnRvQmVOdWxsKCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIGFuZCBNZW1vcnkgTWFuYWdlbWVudCcsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGxhcmdlIGRhdGFzZXRzIGVmZmljaWVudGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBsYXJnZURhdGEgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMDAwIH0sIChfLCBpKSA9PiAoe1xyXG4gICAgICAgIGlkOiBpLFxyXG4gICAgICAgIGRhdGE6ICd4Jy5yZXBlYXQoMTAwMCksIC8vIDFLQiBwZXIgaXRlbVxyXG4gICAgICB9KSk7XHJcblxyXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFyZ2VEYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgYXdhaXQgYXBpQ2FjaGUuc2V0KGBsYXJnZS1rZXktJHtpfWAsIGxhcmdlRGF0YVtpXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGVuZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgY29uc3QgZHVyYXRpb24gPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xyXG5cclxuICAgICAgLy8gU2hvdWxkIGNvbXBsZXRlIHdpdGhpbiByZWFzb25hYmxlIHRpbWUgKGFkanVzdCB0aHJlc2hvbGQgYXMgbmVlZGVkKVxyXG4gICAgICBleHBlY3QoZHVyYXRpb24pLnRvQmVMZXNzVGhhbig1MDAwKTsgLy8gNSBzZWNvbmRzIG1heFxyXG5cclxuICAgICAgLy8gU2hvdWxkIGJlIGFibGUgdG8gcmV0cmlldmUgaXRlbXNcclxuICAgICAgY29uc3QgcmV0cmlldmVkID0gYXdhaXQgYXBpQ2FjaGUuZ2V0KCdsYXJnZS1rZXktNTAwJyk7XHJcbiAgICAgIGV4cGVjdChyZXRyaWV2ZWQpLnRvRXF1YWwobGFyZ2VEYXRhWzUwMF0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBtYWludGFpbiBwZXJmb3JtYW5jZSB1bmRlciBjb25jdXJyZW50IGxvYWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbmN1cnJlbnRPcGVyYXRpb25zID0gMTAwO1xyXG4gICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25jdXJyZW50T3BlcmF0aW9uczsgaSsrKSB7XHJcbiAgICAgICAgcHJvbWlzZXMucHVzaChhcGlDYWNoZS5zZXQoYGNvbmN1cnJlbnQta2V5LSR7aX1gLCBgdmFsdWUtJHtpfWApKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuICAgICAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG5cclxuICAgICAgZXhwZWN0KGVuZFRpbWUgLSBzdGFydFRpbWUpLnRvQmVMZXNzVGhhbigyMDAwKTsgLy8gMiBzZWNvbmRzIG1heFxyXG5cclxuICAgICAgLy8gVmVyaWZ5IGFsbCBvcGVyYXRpb25zIGNvbXBsZXRlZFxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmN1cnJlbnRPcGVyYXRpb25zOyBpKyspIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IGFwaUNhY2hlLmdldChgY29uY3VycmVudC1rZXktJHtpfWApO1xyXG4gICAgICAgIGV4cGVjdCh2YWx1ZSkudG9CZShgdmFsdWUtJHtpfWApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxTQUFBLEdBQUFDLE9BQUE7QUFFQTtBQUNBLE1BQU1DLGdCQUFnQixHQUFHO0VBQ3ZCQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDbEJDLE9BQU8sRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNsQkUsVUFBVSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ3JCRyxLQUFLLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0FBQ2pCLENBQUM7QUFFREksTUFBTSxDQUFDQyxjQUFjLENBQUNDLE1BQU0sRUFBRSxjQUFjLEVBQUU7RUFDNUNDLEtBQUssRUFBRVY7QUFDVCxDQUFDLENBQUM7QUFFRlcsUUFBUSxDQUFDLFVBQVUsRUFBRSxNQUFNO0VBQ3pCQyxVQUFVLENBQUMsTUFBTTtJQUNmVixJQUFJLENBQUNXLGFBQWEsQ0FBQyxDQUFDO0lBQ3BCO0lBQ0FDLDBCQUFRLENBQUNSLEtBQUssQ0FBQyxDQUFDO0VBQ2xCLENBQUMs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