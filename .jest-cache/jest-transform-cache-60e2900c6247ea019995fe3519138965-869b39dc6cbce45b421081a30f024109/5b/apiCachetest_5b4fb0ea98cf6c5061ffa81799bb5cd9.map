{"version":3,"names":["_apiCache","require","localStorageMock","getItem","jest","fn","setItem","removeItem","clear","Object","defineProperty","window","value","describe","beforeEach","clearAllMocks","apiCache","it","testData","message","cacheKey","set","retrieved","get","expect","toEqual","toBeNull","ttl","Promise","resolve","setTimeout","originalCapacity","capacity","persistent","toHaveBeenCalled","callArgs","mock","calls","find","call","toBeTruthy","mockCacheData","data","timestamp","Date","now","mockReturnValue","JSON","stringify","newCache","toHaveBeenCalledWith","stats","getStats","hits","toBe","misses","getHitRate","size","toBeGreaterThan","itemCount","callCount","mockFetcher","promises","dedupe","results","all","forEach","result","reject","Error","rejects","toThrow","tags","clearByTags","largeData","Array","from","length","_","i","id","repeat","startTime","performance","endTime","duration","toBeLessThan","concurrentOperations","push"],"sources":["apiCache.test.ts"],"sourcesContent":["import { advancedApiCache as apiCache } from '../../lib/apiCache';\r\n\r\n// Mock localStorage\r\nconst localStorageMock = {\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n  removeItem: jest.fn(),\r\n  clear: jest.fn(),\r\n};\r\n\r\nObject.defineProperty(window, 'localStorage', {\r\n  value: localStorageMock,\r\n});\r\n\r\ndescribe('apiCache', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Reset cache state\r\n    apiCache.clear();\r\n  });\r\n\r\n  describe('Basic Cache Operations', () => {\r\n    it('should store and retrieve data correctly', async () => {\r\n      const testData = { message: 'Hello World' };\r\n      const cacheKey = 'test-key';\r\n\r\n      await apiCache.set(cacheKey, testData);\r\n      const retrieved = await apiCache.get(cacheKey);\r\n\r\n      expect(retrieved).toEqual(testData);\r\n    });\r\n\r\n    it('should return null for non-existent keys', async () => {\r\n      const retrieved = await apiCache.get('non-existent-key');\r\n      expect(retrieved).toBeNull();\r\n    });\r\n\r\n    it('should handle cache expiration', async () => {\r\n      const testData = { message: 'Expires quickly' };\r\n      const cacheKey = 'expiring-key';\r\n\r\n      // Set with very short TTL (1ms)\r\n      await apiCache.set(cacheKey, testData, { ttl: 1 });\r\n\r\n      // Wait for expiration\r\n      await new Promise(resolve => setTimeout(resolve, 2));\r\n\r\n      const retrieved = await apiCache.get(cacheKey);\r\n      expect(retrieved).toBeNull();\r\n    });\r\n\r\n    it('should clear all cache entries', async () => {\r\n      await apiCache.set('key1', 'value1');\r\n      await apiCache.set('key2', 'value2');\r\n\r\n      apiCache.clear();\r\n\r\n      expect(await apiCache.get('key1')).toBeNull();\r\n      expect(await apiCache.get('key2')).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('LRU Eviction', () => {\r\n    it('should evict least recently used items when capacity is exceeded', async () => {\r\n      // Set a small capacity for testing\r\n      const originalCapacity = (apiCache as any).capacity;\r\n      (apiCache as any).capacity = 3;\r\n\r\n      await apiCache.set('key1', 'value1');\r\n      await apiCache.set('key2', 'value2');\r\n      await apiCache.set('key3', 'value3');\r\n      await apiCache.set('key4', 'value4'); // This should evict key1\r\n\r\n      expect(await apiCache.get('key1')).toBeNull();\r\n      expect(await apiCache.get('key2')).toEqual('value2');\r\n      expect(await apiCache.get('key3')).toEqual('value3');\r\n      expect(await apiCache.get('key4')).toEqual('value4');\r\n\r\n      // Restore original capacity\r\n      (apiCache as any).capacity = originalCapacity;\r\n    });\r\n\r\n    it('should update LRU order on access', async () => {\r\n      const originalCapacity = (apiCache as any).capacity;\r\n      (apiCache as any).capacity = 3;\r\n\r\n      await apiCache.set('key1', 'value1');\r\n      await apiCache.set('key2', 'value2');\r\n      await apiCache.set('key3', 'value3');\r\n\r\n      // Access key1 to make it most recently used\r\n      await apiCache.get('key1');\r\n\r\n      // Add key4, should evict key2 (least recently used)\r\n      await apiCache.set('key4', 'value4');\r\n\r\n      expect(await apiCache.get('key1')).toEqual('value1'); // Still there\r\n      expect(await apiCache.get('key2')).toBeNull(); // Evicted\r\n      expect(await apiCache.get('key3')).toEqual('value3');\r\n      expect(await apiCache.get('key4')).toEqual('value4');\r\n\r\n      (apiCache as any).capacity = originalCapacity;\r\n    });\r\n  });\r\n\r\n  describe('Cache Persistence', () => {\r\n    it('should persist cache to localStorage', async () => {\r\n      const testData = { persistent: true };\r\n\r\n      await apiCache.set('persistent-key', testData);\r\n\r\n      // Check that localStorage.setItem was called\r\n      expect(localStorageMock.setItem).toHaveBeenCalled();\r\n      const callArgs = localStorageMock.setItem.mock.calls.find(call =>\r\n        call[0] === 'api-cache-data'\r\n      );\r\n      expect(callArgs).toBeTruthy();\r\n    });\r\n\r\n    it('should load cache from localStorage on initialization', () => {\r\n      const mockCacheData = {\r\n        'loaded-key': {\r\n          data: 'loaded-value',\r\n          timestamp: Date.now(),\r\n          ttl: 3600000,\r\n        },\r\n      };\r\n\r\n      localStorageMock.getItem.mockReturnValue(JSON.stringify(mockCacheData));\r\n\r\n      // Create new cache instance to test loading\r\n      const newCache = require('../../lib/apiCache').apiCache;\r\n\r\n      // The cache should have loaded the data\r\n      expect(localStorageMock.getItem).toHaveBeenCalledWith('api-cache-data');\r\n    });\r\n  });\r\n\r\n  describe('Cache Statistics', () => {\r\n    it('should track cache hits and misses', async () => {\r\n      await apiCache.set('stats-key', 'stats-value');\r\n\r\n      // Hit\r\n      await apiCache.get('stats-key');\r\n      // Miss\r\n      await apiCache.get('non-existent-key');\r\n\r\n      const stats = apiCache.getStats();\r\n      expect(stats.hits).toBe(1);\r\n      expect(stats.misses).toBe(1);\r\n      expect(apiCache.getHitRate()).toBe(0.5);\r\n    });\r\n\r\n    it('should track cache size and capacity', async () => {\r\n      await apiCache.set('size-key1', 'value1');\r\n      await apiCache.set('size-key2', 'value2');\r\n\r\n      const stats = apiCache.getStats();\r\n      expect(stats.size).toBeGreaterThan(0);\r\n      expect(stats.itemCount).toBe(2);\r\n    });\r\n  });\r\n\r\n  describe('Request Deduplication', () => {\r\n    it('should deduplicate concurrent requests for the same key', async () => {\r\n      let callCount = 0;\r\n      const mockFetcher = jest.fn(() => {\r\n        callCount++;\r\n        return Promise.resolve('fetched-data');\r\n      });\r\n\r\n      // Simulate concurrent requests\r\n      const promises = [\r\n        apiCache.dedupe('dedupe-key', mockFetcher),\r\n        apiCache.dedupe('dedupe-key', mockFetcher),\r\n        apiCache.dedupe('dedupe-key', mockFetcher),\r\n      ];\r\n\r\n      const results = await Promise.all(promises);\r\n\r\n      // All should return the same data\r\n      results.forEach((result: any) => {\r\n        expect(result).toBe('fetched-data');\r\n      });\r\n\r\n      // But fetcher should only be called once\r\n      expect(callCount).toBe(1);\r\n    });\r\n\r\n    it('should handle fetch errors gracefully', async () => {\r\n      const mockFetcher = jest.fn(() => Promise.reject(new Error('Fetch failed')));\r\n\r\n      await expect(\r\n        apiCache.dedupe('error-key', mockFetcher)\r\n      ).rejects.toThrow('Fetch failed');\r\n\r\n      // Should not cache the error\r\n      expect(await apiCache.get('error-key')).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Tag-based Invalidation', () => {\r\n    it('should invalidate entries by tag', async () => {\r\n      await apiCache.set('tagged-key1', 'value1', { tags: ['tag1'] });\r\n      await apiCache.set('tagged-key2', 'value2', { tags: ['tag1', 'tag2'] });\r\n      await apiCache.set('untagged-key', 'value3');\r\n\r\n      apiCache.clearByTags(['tag1']);\r\n\r\n      expect(await apiCache.get('tagged-key1')).toBeNull();\r\n      expect(await apiCache.get('tagged-key2')).toBeNull();\r\n      expect(await apiCache.get('untagged-key')).toEqual('value3');\r\n    });\r\n\r\n    it('should handle multiple tags correctly', async () => {\r\n      await apiCache.set('multi-key', 'value', { tags: ['tag1', 'tag2', 'tag3'] });\r\n\r\n      apiCache.clearByTags(['tag2']);\r\n\r\n      expect(await apiCache.get('multi-key')).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Performance and Memory Management', () => {\r\n    it('should handle large datasets efficiently', async () => {\r\n      const largeData = Array.from({ length: 1000 }, (_, i) => ({\r\n        id: i,\r\n        data: 'x'.repeat(1000), // 1KB per item\r\n      }));\r\n\r\n      const startTime = performance.now();\r\n\r\n      for (let i = 0; i < largeData.length; i++) {\r\n        await apiCache.set(`large-key-${i}`, largeData[i]);\r\n      }\r\n\r\n      const endTime = performance.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // Should complete within reasonable time (adjust threshold as needed)\r\n      expect(duration).toBeLessThan(5000); // 5 seconds max\r\n\r\n      // Should be able to retrieve items\r\n      const retrieved = await apiCache.get('large-key-500');\r\n      expect(retrieved).toEqual(largeData[500]);\r\n    });\r\n\r\n    it('should maintain performance under concurrent load', async () => {\r\n      const concurrentOperations = 100;\r\n      const promises = [];\r\n\r\n      for (let i = 0; i < concurrentOperations; i++) {\r\n        promises.push(apiCache.set(`concurrent-key-${i}`, `value-${i}`));\r\n      }\r\n\r\n      const startTime = performance.now();\r\n      await Promise.all(promises);\r\n      const endTime = performance.now();\r\n\r\n      expect(endTime - startTime).toBeLessThan(2000); // 2 seconds max\r\n\r\n      // Verify all operations completed\r\n      for (let i = 0; i < concurrentOperations; i++) {\r\n        const value = await apiCache.get(`concurrent-key-${i}`);\r\n        expect(value).toBe(`value-${i}`);\r\n      }\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]}