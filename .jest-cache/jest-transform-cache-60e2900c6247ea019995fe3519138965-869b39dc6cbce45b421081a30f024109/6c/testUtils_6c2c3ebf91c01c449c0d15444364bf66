cc5c792ae171cb780ef5e7279998f929
"use strict";

exports.__esModule = true;
var _exportNames = {
  createTestQueryClient: true,
  TestWrapper: true,
  customRender: true,
  mockGeolocation: true,
  mockGoogleMaps: true,
  mockSupabase: true,
  createMockBusiness: true,
  createMockCardRecommendation: true,
  createMockUser: true,
  waitForLoadingToFinish: true,
  expectLoadingState: true,
  expectErrorState: true,
  mockFetchResponse: true,
  mockFetchError: true,
  measureRenderTime: true,
  expectPerformance: true,
  expectAccessible: true,
  mockServiceWorker: true,
  setupTests: true
};
exports.waitForLoadingToFinish = exports.setupTests = exports.mockSupabase = exports.mockServiceWorker = exports.mockGoogleMaps = exports.mockGeolocation = exports.mockFetchResponse = exports.mockFetchError = exports.measureRenderTime = exports.expectPerformance = exports.expectLoadingState = exports.expectErrorState = exports.expectAccessible = exports.customRender = exports.createTestQueryClient = exports.createMockUser = exports.createMockCardRecommendation = exports.createMockBusiness = exports.TestWrapper = void 0;
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
Object.keys(_react2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _react2[key]) return;
  exports[key] = _react2[key];
});
var _reactQuery = require("@tanstack/react-query");
var _globals = require("@jest/globals");
require("@testing-library/jest-dom");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Testing utilities and setup for Points Companion App
// Provides comprehensive test coverage with 80%+ target

// Test Query Client
const createTestQueryClient = () => new _reactQuery.QueryClient({
  defaultOptions: {
    queries: {
      retry: false,
      gcTime: 0
    },
    mutations: {
      retry: false
    }
  }
});

// Test Wrapper with Query Client
exports.createTestQueryClient = createTestQueryClient;
const TestWrapper = ({
  children
}) => {
  const queryClient = createTestQueryClient();
  return /*#__PURE__*/_react.default.createElement(_reactQuery.QueryClientProvider, {
    client: queryClient
  }, children);
};

// Custom render function
exports.TestWrapper = TestWrapper;
const customRender = (ui, options = {}) => (0, _react2.render)(ui, {
  wrapper: TestWrapper,
  ...options
});

// Re-export everything
exports.customRender = customRender;
// Mock implementations
const mockGeolocation = exports.mockGeolocation = {
  getCurrentPosition: _globals.jest.fn(),
  watchPosition: _globals.jest.fn(),
  clearWatch: _globals.jest.fn()
};
const mockGoogleMaps = exports.mockGoogleMaps = {
  Maps: _globals.jest.fn(),
  places: {
    PlacesService: _globals.jest.fn(),
    PlacesServiceStatus: {
      OK: 'OK',
      ZERO_RESULTS: 'ZERO_RESULTS'
    }
  }
};
const mockSupabase = exports.mockSupabase = {
  from: _globals.jest.fn(() => ({
    select: _globals.jest.fn(() => ({
      eq: _globals.jest.fn(() => ({
        single: _globals.jest.fn(() => Promise.resolve({
          data: null,
          error: null
        }))
      }))
    })),
    insert: _globals.jest.fn(() => Promise.resolve({
      error: null
    })),
    update: _globals.jest.fn(() => Promise.resolve({
      error: null
    })),
    delete: _globals.jest.fn(() => Promise.resolve({
      error: null
    }))
  }))
};

// Test data factories
const createMockBusiness = (overrides = {}) => ({
  id: 'test-business-1',
  name: 'Test Restaurant',
  address: '123 Test St',
  category: 'restaurant',
  latitude: 40.7128,
  longitude: -74.0060,
  rating: 4.5,
  price_level: 2,
  distance: 1000,
  place_id: 'test_place_id',
  ...overrides
});
exports.createMockBusiness = createMockBusiness;
const createMockCardRecommendation = (overrides = {}) => ({
  id: 'test-card-1',
  name: 'Test Rewards Card',
  issuer: 'Test Bank',
  category: 'dining',
  rewardRate: 3.0,
  annualFee: 95,
  signupBonus: 'Earn 50,000 points',
  features: ['3x points on dining', 'No foreign transaction fees'],
  matchScore: 85,
  ...overrides
});
exports.createMockCardRecommendation = createMockCardRecommendation;
const createMockUser = (overrides = {}) => ({
  id: 'test-user-1',
  email: 'test@example.com',
  name: 'Test User',
  preferences: {
    favoriteCategories: ['dining', 'travel'],
    notificationSettings: {
      email: true,
      push: true,
      sms: false
    }
  },
  ...overrides
});

// Test utilities
exports.createMockUser = createMockUser;
const waitForLoadingToFinish = () => (0, _react2.waitFor)(() => {
  expect(_react2.screen.queryByTestId('loading')).not.toBeInTheDocument();
}, {
  timeout: 5000
});
exports.waitForLoadingToFinish = waitForLoadingToFinish;
const expectLoadingState = () => {
  expect(_react2.screen.getByTestId('loading')).toBeInTheDocument();
};
exports.expectLoadingState = expectLoadingState;
const expectErrorState = message => {
  expect(_react2.screen.getByTestId('error')).toBeInTheDocument();
  if (message) {
    expect(_react2.screen.getByText(message)).toBeInTheDocument();
  }
};
exports.expectErrorState = expectErrorState;
const mockFetchResponse = (data, ok = true) => {
  global.fetch = _globals.jest.fn(() => Promise.resolve({
    ok,
    json: () => Promise.resolve(data),
    text: () => Promise.resolve(JSON.stringify(data))
  }));
};
exports.mockFetchResponse = mockFetchResponse;
const mockFetchError = error => {
  global.fetch = _globals.jest.fn(() => Promise.reject(error));
};

// Performance testing utilities
exports.mockFetchError = mockFetchError;
const measureRenderTime = async component => {
  const startTime = performance.now();
  customRender(component);
  await (0, _react2.waitFor)(() => {
    expect(document.body).toBeInTheDocument();
  });
  const endTime = performance.now();
  return endTime - startTime;
};
exports.measureRenderTime = measureRenderTime;
const expectPerformance = (renderTime, threshold = 100) => {
  expect(renderTime).toBeLessThan(threshold);
};

// Accessibility testing utilities
exports.expectPerformance = expectPerformance;
const expectAccessible = container => {
  // Check for ARIA labels
  const buttons = container.querySelectorAll('button');
  buttons.forEach(button => {
    expect(button).toHaveAttribute('aria-label');
  });

  // Check for alt text on images
  const images = container.querySelectorAll('img');
  images.forEach(img => {
    expect(img).toHaveAttribute('alt');
  });

  // Check for proper heading hierarchy
  const headings = container.querySelectorAll('h1, h2, h3, h4, h5, h6');
  let lastLevel = 0;
  headings.forEach(heading => {
    const level = parseInt(heading.tagName.charAt(1));
    expect(level).toBeGreaterThanOrEqual(lastLevel);
    lastLevel = level;
  });
};

// Mock service worker
exports.expectAccessible = expectAccessible;
const mockServiceWorker = exports.mockServiceWorker = {
  register: _globals.jest.fn(() => Promise.resolve({
    active: {
      state: 'activated'
    },
    waiting: null,
    installing: null
  })),
  addEventListener: _globals.jest.fn(),
  removeEventListener: _globals.jest.fn()
};

// Setup function for all tests
const setupTests = () => {
  // Mock window methods
  Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: _globals.jest.fn().mockImplementation(query => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: _globals.jest.fn(),
      removeListener: _globals.jest.fn(),
      addEventListener: _globals.jest.fn(),
      removeEventListener: _globals.jest.fn(),
      dispatchEvent: _globals.jest.fn()
    }))
  });

  // Mock IntersectionObserver
  const mockIntersectionObserver = _globals.jest.fn().mockImplementation(() => ({
    observe: _globals.jest.fn(),
    unobserve: _globals.jest.fn(),
    disconnect: _globals.jest.fn()
  }));
  global.IntersectionObserver = mockIntersectionObserver;

  // Mock ResizeObserver
  const mockResizeObserver = _globals.jest.fn().mockImplementation(() => ({
    observe: _globals.jest.fn(),
    unobserve: _globals.jest.fn(),
    disconnect: _globals.jest.fn()
  }));
  global.ResizeObserver = mockResizeObserver;

  // Mock geolocation
  Object.defineProperty(navigator, 'geolocation', {
    value: mockGeolocation,
    writable: true
  });

  // Mock service worker
  Object.defineProperty(navigator, 'serviceWorker', {
    value: mockServiceWorker,
    writable: true
  });

  // Mock Google Maps
  global.google = mockGoogleMaps;

  // Mock localStorage
  const localStorageMock = {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn()
  };
  Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
  });

  // Mock sessionStorage
  const sessionStorageMock = {
    getItem: _globals.jest.fn(),
    setItem: _globals.jest.fn(),
    removeItem: _globals.jest.fn(),
    clear: _globals.jest.fn()
  };
  Object.defineProperty(window, 'sessionStorage', {
    value: sessionStorageMock
  });
};
exports.setupTests = setupTests;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdDIiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9leHBvcnROYW1lcyIsImV4cG9ydHMiLCJfcmVhY3RRdWVyeSIsIl9nbG9iYWxzIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY3JlYXRlVGVzdFF1ZXJ5Q2xpZW50IiwiUXVlcnlDbGllbnQiLCJkZWZhdWx0T3B0aW9ucyIsInF1ZXJpZXMiLCJyZXRyeSIsImdjVGltZSIsIm11dGF0aW9ucyIsIlRlc3RXcmFwcGVyIiwiY2hpbGRyZW4iLCJxdWVyeUNsaWVudCIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsIlF1ZXJ5Q2xpZW50UHJvdmlkZXIiLCJjbGllbnQiLCJjdXN0b21SZW5kZXIiLCJ1aSIsIm9wdGlvbnMiLCJyZW5kZXIiLCJ3cmFwcGVyIiwibW9ja0dlb2xvY2F0aW9uIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwiamVzdCIsImZuIiwid2F0Y2hQb3NpdGlvbiIsImNsZWFyV2F0Y2giLCJtb2NrR29vZ2xlTWFwcyIsIk1hcHMiLCJwbGFjZXMiLCJQbGFjZXNTZXJ2aWNlIiwiUGxhY2VzU2VydmljZVN0YXR1cyIsIk9LIiwiWkVST19SRVNVTFRTIiwibW9ja1N1cGFiYXNlIiwiZnJvbSIsInNlbGVjdCIsImVxIiwic2luZ2xlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJkYXRhIiwiZXJyb3IiLCJpbnNlcnQiLCJ1cGRhdGUiLCJkZWxldGUiLCJjcmVhdGVNb2NrQnVzaW5lc3MiLCJvdmVycmlkZXMiLCJpZCIsIm5hbWUiLCJhZGRyZXNzIiwiY2F0ZWdvcnkiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInJhdGluZyIsInByaWNlX2xldmVsIiwiZGlzdGFuY2UiLCJwbGFjZV9pZCIsImNyZWF0ZU1vY2tDYXJkUmVjb21tZW5kYXRpb24iLCJpc3N1ZXIiLCJyZXdhcmRSYXRlIiwiYW5udWFsRmVlIiwic2lnbnVwQm9udXMiLCJmZWF0dXJlcyIsIm1hdGNoU2NvcmUiLCJjcmVhdGVNb2NrVXNlciIsImVtYWlsIiwicHJlZmVyZW5jZXMiLCJmYXZvcml0ZUNhdGVnb3JpZXMiLCJub3RpZmljYXRpb25TZXR0aW5ncyIsInB1c2giLCJzbXMiLCJ3YWl0Rm9yTG9hZGluZ1RvRmluaXNoIiwid2FpdEZvciIsImV4cGVjdCIsInNjcmVlbiIsInF1ZXJ5QnlUZXN0SWQiLCJub3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInRpbWVvdXQiLCJleHBlY3RMb2FkaW5nU3RhdGUiLCJnZXRCeVRlc3RJZCIsImV4cGVjdEVycm9yU3RhdGUiLCJtZXNzYWdlIiwiZ2V0QnlUZXh0IiwibW9ja0ZldGNoUmVzcG9uc2UiLCJvayIsImdsb2JhbCIsImZldGNoIiwianNvbiIsInRleHQiLCJKU09OIiwic3RyaW5naWZ5IiwibW9ja0ZldGNoRXJyb3IiLCJyZWplY3QiLCJtZWFzdXJlUmVuZGVyVGltZSIsImNvbXBvbmVudCIsInN0YXJ0VGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwiZG9jdW1lbnQiLCJib2R5IiwiZW5kVGltZSIsImV4cGVjdFBlcmZvcm1hbmNlIiwicmVuZGVyVGltZSIsInRocmVzaG9sZCIsInRvQmVMZXNzVGhhbiIsImV4cGVjdEFjY2Vzc2libGUiLCJjb250YWluZXIiLCJidXR0b25zIiwicXVlcnlTZWxlY3RvckFsbCIsImJ1dHRvbiIsInRvSGF2ZUF0dHJpYnV0ZSIsImltYWdlcyIsImltZyIsImhlYWRpbmdzIiwibGFzdExldmVsIiwiaGVhZGluZyIsImxldmVsIiwicGFyc2VJbnQiLCJ0YWdOYW1lIiwiY2hhckF0IiwidG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCIsIm1vY2tTZXJ2aWNlV29ya2VyIiwicmVnaXN0ZXIiLCJhY3RpdmUiLCJzdGF0ZSIsIndhaXRpbmciLCJpbnN0YWxsaW5nIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXR1cFRlc3RzIiwiZGVmaW5lUHJvcGVydHkiLCJ3aW5kb3ciLCJ3cml0YWJsZSIsInZhbHVlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicXVlcnkiLCJtYXRjaGVzIiwibWVkaWEiLCJvbmNoYW5nZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwibW9ja0ludGVyc2VjdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsImRpc2Nvbm5lY3QiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsIm1vY2tSZXNpemVPYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyIiwibmF2aWdhdG9yIiwiZ29vZ2xlIiwibG9jYWxTdG9yYWdlTW9jayIsImdldEl0ZW0iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImNsZWFyIiwic2Vzc2lvblN0b3JhZ2VNb2NrIl0sInNvdXJjZXMiOlsidGVzdFV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRlc3RpbmcgdXRpbGl0aWVzIGFuZCBzZXR1cCBmb3IgUG9pbnRzIENvbXBhbmlvbiBBcHBcclxuLy8gUHJvdmlkZXMgY29tcHJlaGVuc2l2ZSB0ZXN0IGNvdmVyYWdlIHdpdGggODAlKyB0YXJnZXRcclxuXHJcbmltcG9ydCBSZWFjdCwgeyBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcclxuaW1wb3J0IHsgUXVlcnlDbGllbnQsIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xyXG5pbXBvcnQgeyBqZXN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XHJcblxyXG4vLyBUZXN0IFF1ZXJ5IENsaWVudFxyXG5leHBvcnQgY29uc3QgY3JlYXRlVGVzdFF1ZXJ5Q2xpZW50ID0gKCkgPT4gbmV3IFF1ZXJ5Q2xpZW50KHtcclxuICBkZWZhdWx0T3B0aW9uczoge1xyXG4gICAgcXVlcmllczoge1xyXG4gICAgICByZXRyeTogZmFsc2UsXHJcbiAgICAgIGdjVGltZTogMCxcclxuICAgIH0sXHJcbiAgICBtdXRhdGlvbnM6IHtcclxuICAgICAgcmV0cnk6IGZhbHNlLFxyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuXHJcbi8vIFRlc3QgV3JhcHBlciB3aXRoIFF1ZXJ5IENsaWVudFxyXG5leHBvcnQgY29uc3QgVGVzdFdyYXBwZXIgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSkgPT4ge1xyXG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gY3JlYXRlVGVzdFF1ZXJ5Q2xpZW50KCk7XHJcblxyXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFF1ZXJ5Q2xpZW50UHJvdmlkZXIsIHsgY2xpZW50OiBxdWVyeUNsaWVudCB9LCBjaGlsZHJlbik7XHJcbn07XHJcblxyXG4vLyBDdXN0b20gcmVuZGVyIGZ1bmN0aW9uXHJcbmV4cG9ydCBjb25zdCBjdXN0b21SZW5kZXIgPSAodWk6IFJlYWN0RWxlbWVudCwgb3B0aW9ucyA9IHt9KSA9PlxyXG4gIHJlbmRlcih1aSwgeyB3cmFwcGVyOiBUZXN0V3JhcHBlciwgLi4ub3B0aW9ucyB9KTtcclxuXHJcbi8vIFJlLWV4cG9ydCBldmVyeXRoaW5nXHJcbmV4cG9ydCAqIGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xyXG5cclxuLy8gTW9jayBpbXBsZW1lbnRhdGlvbnNcclxuZXhwb3J0IGNvbnN0IG1vY2tHZW9sb2NhdGlvbiA9IHtcclxuICBnZXRDdXJyZW50UG9zaXRpb246IGplc3QuZm4oKSxcclxuICB3YXRjaFBvc2l0aW9uOiBqZXN0LmZuKCksXHJcbiAgY2xlYXJXYXRjaDogamVzdC5mbigpLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG1vY2tHb29nbGVNYXBzID0ge1xyXG4gIE1hcHM6IGplc3QuZm4oKSxcclxuICBwbGFjZXM6IHtcclxuICAgIFBsYWNlc1NlcnZpY2U6IGplc3QuZm4oKSxcclxuICAgIFBsYWNlc1NlcnZpY2VTdGF0dXM6IHtcclxuICAgICAgT0s6ICdPSycsXHJcbiAgICAgIFpFUk9fUkVTVUxUUzogJ1pFUk9fUkVTVUxUUycsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbW9ja1N1cGFiYXNlID0ge1xyXG4gIGZyb206IGplc3QuZm4oKCkgPT4gKHtcclxuICAgIHNlbGVjdDogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICBlcTogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICAgIHNpbmdsZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiBudWxsLCBlcnJvcjogbnVsbCB9KSksXHJcbiAgICAgIH0pKSxcclxuICAgIH0pKSxcclxuICAgIGluc2VydDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBlcnJvcjogbnVsbCB9KSksXHJcbiAgICB1cGRhdGU6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgZXJyb3I6IG51bGwgfSkpLFxyXG4gICAgZGVsZXRlOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGVycm9yOiBudWxsIH0pKSxcclxuICB9KSksXHJcbn07XHJcblxyXG4vLyBUZXN0IGRhdGEgZmFjdG9yaWVzXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVNb2NrQnVzaW5lc3MgPSAob3ZlcnJpZGVzID0ge30pID0+ICh7XHJcbiAgaWQ6ICd0ZXN0LWJ1c2luZXNzLTEnLFxyXG4gIG5hbWU6ICdUZXN0IFJlc3RhdXJhbnQnLFxyXG4gIGFkZHJlc3M6ICcxMjMgVGVzdCBTdCcsXHJcbiAgY2F0ZWdvcnk6ICdyZXN0YXVyYW50JyxcclxuICBsYXRpdHVkZTogNDAuNzEyOCxcclxuICBsb25naXR1ZGU6IC03NC4wMDYwLFxyXG4gIHJhdGluZzogNC41LFxyXG4gIHByaWNlX2xldmVsOiAyLFxyXG4gIGRpc3RhbmNlOiAxMDAwLFxyXG4gIHBsYWNlX2lkOiAndGVzdF9wbGFjZV9pZCcsXHJcbiAgLi4ub3ZlcnJpZGVzLFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVNb2NrQ2FyZFJlY29tbWVuZGF0aW9uID0gKG92ZXJyaWRlcyA9IHt9KSA9PiAoe1xyXG4gIGlkOiAndGVzdC1jYXJkLTEnLFxyXG4gIG5hbWU6ICdUZXN0IFJld2FyZHMgQ2FyZCcsXHJcbiAgaXNzdWVyOiAnVGVzdCBCYW5rJyxcclxuICBjYXRlZ29yeTogJ2RpbmluZycsXHJcbiAgcmV3YXJkUmF0ZTogMy4wLFxyXG4gIGFubnVhbEZlZTogOTUsXHJcbiAgc2lnbnVwQm9udXM6ICdFYXJuIDUwLDAwMCBwb2ludHMnLFxyXG4gIGZlYXR1cmVzOiBbJzN4IHBvaW50cyBvbiBkaW5pbmcnLCAnTm8gZm9yZWlnbiB0cmFuc2FjdGlvbiBmZWVzJ10sXHJcbiAgbWF0Y2hTY29yZTogODUsXHJcbiAgLi4ub3ZlcnJpZGVzLFxyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVNb2NrVXNlciA9IChvdmVycmlkZXMgPSB7fSkgPT4gKHtcclxuICBpZDogJ3Rlc3QtdXNlci0xJyxcclxuICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxyXG4gIG5hbWU6ICdUZXN0IFVzZXInLFxyXG4gIHByZWZlcmVuY2VzOiB7XHJcbiAgICBmYXZvcml0ZUNhdGVnb3JpZXM6IFsnZGluaW5nJywgJ3RyYXZlbCddLFxyXG4gICAgbm90aWZpY2F0aW9uU2V0dGluZ3M6IHtcclxuICAgICAgZW1haWw6IHRydWUsXHJcbiAgICAgIHB1c2g6IHRydWUsXHJcbiAgICAgIHNtczogZmFsc2UsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgLi4ub3ZlcnJpZGVzLFxyXG59KTtcclxuXHJcbi8vIFRlc3QgdXRpbGl0aWVzXHJcbmV4cG9ydCBjb25zdCB3YWl0Rm9yTG9hZGluZ1RvRmluaXNoID0gKCkgPT5cclxuICB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnbG9hZGluZycpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9LCB7IHRpbWVvdXQ6IDUwMDAgfSk7XHJcblxyXG5leHBvcnQgY29uc3QgZXhwZWN0TG9hZGluZ1N0YXRlID0gKCkgPT4ge1xyXG4gIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ2xvYWRpbmcnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBleHBlY3RFcnJvclN0YXRlID0gKG1lc3NhZ2U/OiBzdHJpbmcpID0+IHtcclxuICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdlcnJvcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xyXG4gIGlmIChtZXNzYWdlKSB7XHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dChtZXNzYWdlKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbW9ja0ZldGNoUmVzcG9uc2UgPSAoZGF0YTogYW55LCBvayA9IHRydWUpID0+IHtcclxuICBnbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCgpID0+XHJcbiAgICBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgICBvayxcclxuICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpLFxyXG4gICAgICB0ZXh0OiAoKSA9PiBQcm9taXNlLnJlc29sdmUoSlNPTi5zdHJpbmdpZnkoZGF0YSkpLFxyXG4gICAgfSBhcyBSZXNwb25zZSlcclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IG1vY2tGZXRjaEVycm9yID0gKGVycm9yOiBFcnJvcikgPT4ge1xyXG4gIGdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZWplY3QoZXJyb3IpKTtcclxufTtcclxuXHJcbi8vIFBlcmZvcm1hbmNlIHRlc3RpbmcgdXRpbGl0aWVzXHJcbmV4cG9ydCBjb25zdCBtZWFzdXJlUmVuZGVyVGltZSA9IGFzeW5jIChjb21wb25lbnQ6IFJlYWN0RWxlbWVudCkgPT4ge1xyXG4gIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG5cclxuICBjdXN0b21SZW5kZXIoY29tcG9uZW50KTtcclxuXHJcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keSkudG9CZUluVGhlRG9jdW1lbnQoKTtcclxuICB9KTtcclxuXHJcbiAgY29uc3QgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gIHJldHVybiBlbmRUaW1lIC0gc3RhcnRUaW1lO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGV4cGVjdFBlcmZvcm1hbmNlID0gKHJlbmRlclRpbWU6IG51bWJlciwgdGhyZXNob2xkID0gMTAwKSA9PiB7XHJcbiAgZXhwZWN0KHJlbmRlclRpbWUpLnRvQmVMZXNzVGhhbih0aHJlc2hvbGQpO1xyXG59O1xyXG5cclxuLy8gQWNjZXNzaWJpbGl0eSB0ZXN0aW5nIHV0aWxpdGllc1xyXG5leHBvcnQgY29uc3QgZXhwZWN0QWNjZXNzaWJsZSA9IChjb250YWluZXI6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgLy8gQ2hlY2sgZm9yIEFSSUEgbGFiZWxzXHJcbiAgY29uc3QgYnV0dG9ucyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdidXR0b24nKTtcclxuICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgIGV4cGVjdChidXR0b24pLnRvSGF2ZUF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBDaGVjayBmb3IgYWx0IHRleHQgb24gaW1hZ2VzXHJcbiAgY29uc3QgaW1hZ2VzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xyXG4gIGltYWdlcy5mb3JFYWNoKGltZyA9PiB7XHJcbiAgICBleHBlY3QoaW1nKS50b0hhdmVBdHRyaWJ1dGUoJ2FsdCcpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBDaGVjayBmb3IgcHJvcGVyIGhlYWRpbmcgaGllcmFyY2h5XHJcbiAgY29uc3QgaGVhZGluZ3MgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnaDEsIGgyLCBoMywgaDQsIGg1LCBoNicpO1xyXG4gIGxldCBsYXN0TGV2ZWwgPSAwO1xyXG4gIGhlYWRpbmdzLmZvckVhY2goaGVhZGluZyA9PiB7XHJcbiAgICBjb25zdCBsZXZlbCA9IHBhcnNlSW50KGhlYWRpbmcudGFnTmFtZS5jaGFyQXQoMSkpO1xyXG4gICAgZXhwZWN0KGxldmVsKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKGxhc3RMZXZlbCk7XHJcbiAgICBsYXN0TGV2ZWwgPSBsZXZlbDtcclxuICB9KTtcclxufTtcclxuXHJcbi8vIE1vY2sgc2VydmljZSB3b3JrZXJcclxuZXhwb3J0IGNvbnN0IG1vY2tTZXJ2aWNlV29ya2VyID0ge1xyXG4gIHJlZ2lzdGVyOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICBhY3RpdmU6IHsgc3RhdGU6ICdhY3RpdmF0ZWQnIH0sXHJcbiAgICB3YWl0aW5nOiBudWxsLFxyXG4gICAgaW5zdGFsbGluZzogbnVsbCxcclxuICB9KSksXHJcbiAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcclxufTtcclxuXHJcbi8vIFNldHVwIGZ1bmN0aW9uIGZvciBhbGwgdGVzdHNcclxuZXhwb3J0IGNvbnN0IHNldHVwVGVzdHMgPSAoKSA9PiB7XHJcbiAgLy8gTW9jayB3aW5kb3cgbWV0aG9kc1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdtYXRjaE1lZGlhJywge1xyXG4gICAgd3JpdGFibGU6IHRydWUsXHJcbiAgICB2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihxdWVyeSA9PiAoe1xyXG4gICAgICBtYXRjaGVzOiBmYWxzZSxcclxuICAgICAgbWVkaWE6IHF1ZXJ5LFxyXG4gICAgICBvbmNoYW5nZTogbnVsbCxcclxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXHJcbiAgICAgIGRpc3BhdGNoRXZlbnQ6IGplc3QuZm4oKSxcclxuICAgIH0pKSxcclxuICB9KTtcclxuXHJcbiAgLy8gTW9jayBJbnRlcnNlY3Rpb25PYnNlcnZlclxyXG4gIGNvbnN0IG1vY2tJbnRlcnNlY3Rpb25PYnNlcnZlciA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcclxuICAgIG9ic2VydmU6IGplc3QuZm4oKSxcclxuICAgIHVub2JzZXJ2ZTogamVzdC5mbigpLFxyXG4gICAgZGlzY29ubmVjdDogamVzdC5mbigpLFxyXG4gIH0pKTtcclxuICAoZ2xvYmFsIGFzIGFueSkuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBtb2NrSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XHJcblxyXG4gIC8vIE1vY2sgUmVzaXplT2JzZXJ2ZXJcclxuICBjb25zdCBtb2NrUmVzaXplT2JzZXJ2ZXIgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgICBvYnNlcnZlOiBqZXN0LmZuKCksXHJcbiAgICB1bm9ic2VydmU6IGplc3QuZm4oKSxcclxuICAgIGRpc2Nvbm5lY3Q6IGplc3QuZm4oKSxcclxuICB9KSk7XHJcbiAgKGdsb2JhbCBhcyBhbnkpLlJlc2l6ZU9ic2VydmVyID0gbW9ja1Jlc2l6ZU9ic2VydmVyO1xyXG5cclxuICAvLyBNb2NrIGdlb2xvY2F0aW9uXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5hdmlnYXRvciwgJ2dlb2xvY2F0aW9uJywge1xyXG4gICAgdmFsdWU6IG1vY2tHZW9sb2NhdGlvbixcclxuICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gIH0pO1xyXG5cclxuICAvLyBNb2NrIHNlcnZpY2Ugd29ya2VyXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5hdmlnYXRvciwgJ3NlcnZpY2VXb3JrZXInLCB7XHJcbiAgICB2YWx1ZTogbW9ja1NlcnZpY2VXb3JrZXIsXHJcbiAgICB3cml0YWJsZTogdHJ1ZSxcclxuICB9KTtcclxuXHJcbiAgLy8gTW9jayBHb29nbGUgTWFwc1xyXG4gIChnbG9iYWwgYXMgYW55KS5nb29nbGUgPSBtb2NrR29vZ2xlTWFwcztcclxuXHJcbiAgLy8gTW9jayBsb2NhbFN0b3JhZ2VcclxuICBjb25zdCBsb2NhbFN0b3JhZ2VNb2NrID0ge1xyXG4gICAgZ2V0SXRlbTogamVzdC5mbigpLFxyXG4gICAgc2V0SXRlbTogamVzdC5mbigpLFxyXG4gICAgcmVtb3ZlSXRlbTogamVzdC5mbigpLFxyXG4gICAgY2xlYXI6IGplc3QuZm4oKSxcclxuICB9O1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdsb2NhbFN0b3JhZ2UnLCB7XHJcbiAgICB2YWx1ZTogbG9jYWxTdG9yYWdlTW9jayxcclxuICB9KTtcclxuXHJcbiAgLy8gTW9jayBzZXNzaW9uU3RvcmFnZVxyXG4gIGNvbnN0IHNlc3Npb25TdG9yYWdlTW9jayA9IHtcclxuICAgIGdldEl0ZW06IGplc3QuZm4oKSxcclxuICAgIHNldEl0ZW06IGplc3QuZm4oKSxcclxuICAgIHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcclxuICAgIGNsZWFyOiBqZXN0LmZuKCksXHJcbiAgfTtcclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnc2Vzc2lvblN0b3JhZ2UnLCB7XHJcbiAgICB2YWx1ZTogc2Vzc2lvblN0b3JhZ2VNb2NrLFxyXG4gIH0pO1xyXG59O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFB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