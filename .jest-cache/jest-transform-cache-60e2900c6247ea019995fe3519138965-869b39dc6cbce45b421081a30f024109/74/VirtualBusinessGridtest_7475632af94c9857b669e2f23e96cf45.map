{"file":"C:\\Users\\Media Server\\Documents\\Projects\\points-companion-app\\src\\test\\components\\VirtualBusinessGrid.test.tsx","mappings":"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","names":[],"sources":["C:\\Users\\Media Server\\Documents\\Projects\\points-companion-app\\src\\test\\components\\VirtualBusinessGrid.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { customRender, screen, waitFor, fireEvent, createMockBusiness, setupTests } from '../testUtils';\r\nimport VirtualBusinessGrid from '../../components/common/VirtualBusinessGrid';\r\n\r\n// Setup mocks before tests\r\nbeforeAll(() => {\r\n  setupTests();\r\n});\r\n\r\ndescribe('VirtualBusinessGrid', () => {\r\n  const mockBusinesses = Array.from({ length: 100 }, (_, i) =>\r\n    createMockBusiness({\r\n      id: `business-${i}`,\r\n      name: `Test Business ${i}`,\r\n      distance: i * 100,\r\n    })\r\n  );\r\n\r\n  const defaultProps = {\r\n    businesses: mockBusinesses,\r\n    selectedBusiness: null,\r\n    onBusinessSelect: jest.fn(),\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders business grid with correct number of visible items', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    await waitFor(() => {\r\n      // Should render a subset of businesses (not all 100)\r\n      const businessCards = screen.getAllByTestId(/^business-card-/);\r\n      expect(businessCards.length).toBeGreaterThan(0);\r\n      expect(businessCards.length).toBeLessThan(100);\r\n    });\r\n  });\r\n\r\n  it('calls onBusinessSelect when business is clicked', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    await waitFor(() => {\r\n      const firstBusinessCard = screen.getByTestId('business-card-0');\r\n      firstBusinessCard.click();\r\n    });\r\n\r\n    expect(defaultProps.onBusinessSelect).toHaveBeenCalledWith(mockBusinesses[0]);\r\n  });\r\n\r\n  it('renders business information correctly', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Test Business 0')).toBeInTheDocument();\r\n      expect(screen.getByText('Test Restaurant')).toBeInTheDocument();\r\n      expect(screen.getByText('123 Test St')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('displays distance information', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('1.0 km')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('shows rating with stars', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    await waitFor(() => {\r\n      const ratingElement = screen.getByTestId('rating-4.5');\r\n      expect(ratingElement).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('displays price level indicators', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    await waitFor(() => {\r\n      const priceIndicators = screen.getAllByTestId('price-indicator');\r\n      expect(priceIndicators.length).toBe(2); // $$ for price_level 2\r\n    });\r\n  });\r\n\r\n  it('handles empty businesses array', () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} businesses={[]} />);\r\n\r\n    expect(screen.getByText('No businesses found')).toBeInTheDocument();\r\n  });\r\n\r\n  it('calls onLoadMore when scrolling to bottom', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    // Simulate scroll to bottom\r\n    const scrollContainer = screen.getByTestId('virtual-grid-container');\r\n    fireEvent.scroll(scrollContainer, { target: { scrollTop: 1000 } });\r\n\r\n    // The component handles scrolling internally, no external onLoadMore callback\r\n    await waitFor(() => {\r\n      expect(scrollContainer).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('is accessible with proper ARIA labels', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    await waitFor(() => {\r\n      const businessCards = screen.getAllByTestId(/^business-card-/);\r\n      businessCards.forEach(card => {\r\n        expect(card).toHaveAttribute('aria-label');\r\n        expect(card).toHaveAttribute('role', 'button');\r\n      });\r\n    });\r\n  });\r\n\r\n  it('handles keyboard navigation', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    await waitFor(() => {\r\n      const firstBusinessCard = screen.getByTestId('business-card-0');\r\n      firstBusinessCard.focus();\r\n      fireEvent.keyDown(firstBusinessCard, { key: 'Enter' });\r\n    });\r\n\r\n    expect(defaultProps.onBusinessSelect).toHaveBeenCalledWith(mockBusinesses[0]);\r\n  });\r\n\r\n  it('renders with responsive columns', () => {\r\n    // Mock different screen sizes\r\n    Object.defineProperty(window, 'innerWidth', { value: 768, writable: true });\r\n\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    // Should adjust columns based on screen size\r\n    const grid = screen.getByTestId('virtual-grid-container');\r\n    expect(grid).toHaveClass('grid-cols-2'); // md:grid-cols-2\r\n  });\r\n\r\n  it('memoizes business cards for performance', () => {\r\n    const { rerender } = customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    // Re-render with same props\r\n    rerender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    // Business cards should be memoized and not re-render unnecessarily\r\n    expect(screen.getByTestId('business-card-0')).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles business selection with proper focus management', async () => {\r\n    customRender(<VirtualBusinessGrid {...defaultProps} />);\r\n\r\n    await waitFor(() => {\r\n      const firstBusinessCard = screen.getByTestId('business-card-0');\r\n      firstBusinessCard.click();\r\n    });\r\n\r\n    expect(defaultProps.onBusinessSelect).toHaveBeenCalledWith(mockBusinesses[0]);\r\n    // Focus should be managed properly\r\n    expect(document.activeElement).toBeInTheDocument();\r\n  });\r\n});\r\n"],"version":3}