{"version":3,"names":["_brands","require","_mccMap","KEYWORD_TO_TAXONOMY","rx","t","w","classifyBusiness","input","best","brandId","name","brand","findBrandIdByName","id","taxonomy","score","votes","Map","addVote","set","get","gt","googleTypes","g","toLowerCase","test","mapboxPlaceName","rule","sorted","Array","from","entries","sort","a","b","Math","min","nameBlob","max","confidence","mccCandidates","mccsForTaxonomy"],"sources":["businessClassifier.ts"],"sourcesContent":["import { findBrandIdByName } from './brands';\r\nimport { mccsForTaxonomy, Taxonomy } from './mccMap';\r\n\r\nexport type ProviderSignals = {\r\n  googleTypes?: string[];\r\n  mapboxPlaceName?: string;\r\n};\r\n\r\nexport type Classification = {\r\n  taxonomy: Taxonomy;\r\n  mccCandidates: number[];\r\n  confidence: number; // 0..1\r\n  brandId?: string;\r\n};\r\n\r\nconst KEYWORD_TO_TAXONOMY: Array<{ rx: RegExp; t: Taxonomy; w: number }> = [\r\n  { rx: /coffee|cafe|espresso|latte/i, t: 'coffee', w: 0.5 },\r\n  { rx: /restaurant|diner|grill|taqueria|pizza|sushi|noodle|bbq/i, t: 'dining', w: 0.5 },\r\n  { rx: /grocery|supermarket|market|bodega/i, t: 'groceries', w: 0.5 },\r\n  { rx: /gas|fuel|station/i, t: 'gas', w: 0.6 },\r\n  { rx: /pharmacy|drugstore/i, t: 'pharmacy', w: 0.6 },\r\n  { rx: /hotel|inn|lodging/i, t: 'hotels', w: 0.6 },\r\n  { rx: /electronics|gadgets/i, t: 'electronics', w: 0.4 },\r\n  { rx: /hardware|home\\s?goods|home\\s?improvement/i, t: 'home_improvement', w: 0.5 },\r\n  { rx: /movie|theater|bowling|attraction/i, t: 'entertainment', w: 0.4 },\r\n  { rx: /travel|tours|agency/i, t: 'travel', w: 0.3 },\r\n];\r\n\r\nexport function classifyBusiness(input: {\r\n  name?: string;\r\n  googleTypes?: string[];\r\n  mapboxPlaceName?: string;\r\n}): Classification {\r\n  let best: { taxonomy: Taxonomy; score: number } | undefined;\r\n  let brandId: string | undefined;\r\n\r\n  // Brand match dominates\r\n  if (input.name) {\r\n    const brand = findBrandIdByName(input.name);\r\n    if (brand) {\r\n      brandId = brand.id;\r\n      best = { taxonomy: brand.taxonomy, score: 1.0 };\r\n    }\r\n  }\r\n\r\n  const votes = new Map<Taxonomy, number>();\r\n  const addVote = (t: Taxonomy, w: number) => votes.set(t, (votes.get(t) ?? 0) + w);\r\n\r\n  // Google types mapping (simple heuristics)\r\n  for (const gt of input.googleTypes ?? []) {\r\n    const g = gt.toLowerCase();\r\n    if (/restaurant|meal_takeaway|meal_delivery|food|bakery|bar|bistro|brunch/.test(g)) addVote('dining', 0.85);\r\n    if (/cafe|coffee/.test(g)) addVote('coffee', 0.9);\r\n    if (/grocery|supermarket|convenience|market/.test(g)) addVote('groceries', 0.8);\r\n    if (/gas/.test(g)) addVote('gas', 0.8);\r\n    if (/pharmacy|drugstore/.test(g)) addVote('pharmacy', 0.8);\r\n    if (/movie|theater|bowling|attraction/.test(g)) addVote('entertainment', 0.7);\r\n    if (/lodging|hotel/.test(g)) addVote('hotels', 0.85);\r\n    if (/electronics/.test(g)) addVote('electronics', 0.6);\r\n    if (/home_goods|hardware/.test(g)) addVote('home_improvement', 0.6);\r\n    if (/department_store|shopping_mall|store|retail/.test(g)) addVote('shopping', 0.55);\r\n  }\r\n\r\n  // Mapbox place-name keywords\r\n  if (input.mapboxPlaceName) {\r\n    for (const rule of KEYWORD_TO_TAXONOMY) {\r\n      if (rule.rx.test(input.mapboxPlaceName)) addVote(rule.t, rule.w);\r\n    }\r\n  }\r\n\r\n  // Name keywords\r\n  if (input.name) {\r\n    for (const rule of KEYWORD_TO_TAXONOMY) {\r\n      if (rule.rx.test(input.name)) addVote(rule.t, rule.w);\r\n    }\r\n  }\r\n\r\n  // Decide best taxonomy\r\n  const sorted = Array.from(votes.entries()).sort((a, b) => b[1] - a[1]);\r\n  if (!best && sorted[0]) {\r\n    best = { taxonomy: sorted[0][0], score: Math.min(1, sorted[0][1]) };\r\n  }\r\n  // Default if still unknown\r\n  if (!best) best = { taxonomy: 'shopping', score: 0.3 };\r\n\r\n  // Nudge ambiguous cases with food cues toward dining/coffee\r\n  const nameBlob = `${input.name ?? ''} ${input.mapboxPlaceName ?? ''}`;\r\n  if (best.taxonomy === 'shopping') {\r\n    if (/cafe|coffee|espresso|latte/i.test(nameBlob)) {\r\n      best = { taxonomy: 'coffee', score: Math.max(best.score, 0.6) };\r\n    } else if (/restaurant|grill|bar|kitchen|pizza|sushi|taco|bbq|deli|bistro|eatery/i.test(nameBlob)) {\r\n      best = { taxonomy: 'dining', score: Math.max(best.score, 0.6) };\r\n    }\r\n  }\r\n\r\n  const confidence = Math.min(1, best.score);\r\n  return {\r\n    taxonomy: best.taxonomy,\r\n    mccCandidates: mccsForTaxonomy(best.taxonomy),\r\n    confidence,\r\n    brandId,\r\n  };\r\n}\r\n"],"mappings":";;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAcA,MAAME,mBAAkE,GAAG,CACzE;EAAEC,EAAE,EAAE,6BAA6B;EAAEC,CAAC,EAAE,QAAQ;EAAEC,CAAC,EAAE;AAAI,CAAC,EAC1D;EAAEF,EAAE,EAAE,yDAAyD;EAAEC,CAAC,EAAE,QAAQ;EAAEC,CAAC,EAAE;AAAI,CAAC,EACtF;EAAEF,EAAE,EAAE,oCAAoC;EAAEC,CAAC,EAAE,WAAW;EAAEC,CAAC,EAAE;AAAI,CAAC,EACpE;EAAEF,EAAE,EAAE,mBAAmB;EAAEC,CAAC,EAAE,KAAK;EAAEC,CAAC,EAAE;AAAI,CAAC,EAC7C;EAAEF,EAAE,EAAE,qBAAqB;EAAEC,CAAC,EAAE,UAAU;EAAEC,CAAC,EAAE;AAAI,CAAC,EACpD;EAAEF,EAAE,EAAE,oBAAoB;EAAEC,CAAC,EAAE,QAAQ;EAAEC,CAAC,EAAE;AAAI,CAAC,EACjD;EAAEF,EAAE,EAAE,sBAAsB;EAAEC,CAAC,EAAE,aAAa;EAAEC,CAAC,EAAE;AAAI,CAAC,EACxD;EAAEF,EAAE,EAAE,2CAA2C;EAAEC,CAAC,EAAE,kBAAkB;EAAEC,CAAC,EAAE;AAAI,CAAC,EAClF;EAAEF,EAAE,EAAE,mCAAmC;EAAEC,CAAC,EAAE,eAAe;EAAEC,CAAC,EAAE;AAAI,CAAC,EACvE;EAAEF,EAAE,EAAE,sBAAsB;EAAEC,CAAC,EAAE,QAAQ;EAAEC,CAAC,EAAE;AAAI,CAAC,CACpD;AAEM,SAASC,gBAAgBA,CAACC,KAIhC,EAAkB;EACjB,IAAIC,IAAuD;EAC3D,IAAIC,OAA2B;;EAE/B;EACA,IAAIF,KAAK,CAACG,IAAI,EAAE;IACd,MAAMC,KAAK,GAAG,IAAAC,yBAAiB,EAACL,KAAK,CAACG,IAAI,CAAC;IAC3C,IAAIC,KAAK,EAAE;MACTF,OAAO,GAAGE,KAAK,CAACE,EAAE;MAClBL,IAAI,GAAG;QAAEM,QAAQ,EAAEH,KAAK,CAACG,QAAQ;QAAEC,KAAK,EAAE;MAAI,CAAC;IACjD;EACF;EAEA,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAAmB,CAAC;EACzC,MAAMC,OAAO,GAAGA,CAACd,CAAW,EAAEC,CAAS,KAAKW,KAAK,CAACG,GAAG,CAACf,CAAC,EAAE,CAACY,KAAK,CAACI,GAAG,CAAChB,CAAC,CAAC,IAAI,CAAC,IAAIC,CAAC,CAAC;;EAEjF;EACA,KAAK,MAAMgB,EAAE,IAAId,KAAK,CAACe,WAAW,IAAI,EAAE,EAAE;IACxC,MAAMC,CAAC,GAAGF,EAAE,CAACG,WAAW,CAAC,CAAC;IAC1B,IAAI,sEAAsE,CAACC,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;IAC3G,IAAI,aAAa,CAACO,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;IACjD,IAAI,wCAAwC,CAACO,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC;IAC/E,IAAI,KAAK,CAACO,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IACtC,IAAI,oBAAoB,CAACO,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC;IAC1D,IAAI,kCAAkC,CAACO,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;IAC7E,IAAI,eAAe,CAACO,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;IACpD,IAAI,aAAa,CAACO,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,aAAa,EAAE,GAAG,CAAC;IACtD,IAAI,qBAAqB,CAACO,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,kBAAkB,EAAE,GAAG,CAAC;IACnE,IAAI,6CAA6C,CAACO,IAAI,CAACF,CAAC,CAAC,EAAEL,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;EACtF;;EAEA;EACA,IAAIX,KAAK,CAACmB,eAAe,EAAE;IACzB,KAAK,MAAMC,IAAI,IAAIzB,mBAAmB,EAAE;MACtC,IAAIyB,IAAI,CAACxB,EAAE,CAACsB,IAAI,CAAClB,KAAK,CAACmB,eAAe,CAAC,EAAER,OAAO,CAACS,IAAI,CAACvB,CAAC,EAAEuB,IAAI,CAACtB,CAAC,CAAC;IAClE;EACF;;EAEA;EACA,IAAIE,KAAK,CAACG,IAAI,EAAE;IACd,KAAK,MAAMiB,IAAI,IAAIzB,mBAAmB,EAAE;MACtC,IAAIyB,IAAI,CAACxB,EAAE,CAACsB,IAAI,CAAClB,KAAK,CAACG,IAAI,CAAC,EAAEQ,OAAO,CAACS,IAAI,CAACvB,CAAC,EAAEuB,IAAI,CAACtB,CAAC,CAAC;IACvD;EACF;;EAEA;EACA,MAAMuB,MAAM,GAAGC,KAAK,CAACC,IAAI,CAACd,KAAK,CAACe,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC;EACtE,IAAI,CAACzB,IAAI,IAAIoB,MAAM,CAAC,CAAC,CAAC,EAAE;IACtBpB,IAAI,GAAG;MAAEM,QAAQ,EAAEc,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAAEb,KAAK,EAAEoB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAAE,CAAC;EACrE;EACA;EACA,IAAI,CAACpB,IAAI,EAAEA,IAAI,GAAG;IAAEM,QAAQ,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAI,CAAC;;EAEtD;EACA,MAAMsB,QAAQ,GAAG,GAAG9B,KAAK,CAACG,IAAI,IAAI,EAAE,IAAIH,KAAK,CAACmB,eAAe,IAAI,EAAE,EAAE;EACrE,IAAIlB,IAAI,CAACM,QAAQ,KAAK,UAAU,EAAE;IAChC,IAAI,6BAA6B,CAACW,IAAI,CAACY,QAAQ,CAAC,EAAE;MAChD7B,IAAI,GAAG;QAAEM,QAAQ,EAAE,QAAQ;QAAEC,KAAK,EAAEoB,IAAI,CAACG,GAAG,CAAC9B,IAAI,CAACO,KAAK,EAAE,GAAG;MAAE,CAAC;IACjE,CAAC,MAAM,IAAI,uEAAuE,CAACU,IAAI,CAACY,QAAQ,CAAC,EAAE;MACjG7B,IAAI,GAAG;QAAEM,QAAQ,EAAE,QAAQ;QAAEC,KAAK,EAAEoB,IAAI,CAACG,GAAG,CAAC9B,IAAI,CAACO,KAAK,EAAE,GAAG;MAAE,CAAC;IACjE;EACF;EAEA,MAAMwB,UAAU,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE5B,IAAI,CAACO,KAAK,CAAC;EAC1C,OAAO;IACLD,QAAQ,EAAEN,IAAI,CAACM,QAAQ;IACvB0B,aAAa,EAAE,IAAAC,uBAAe,EAACjC,IAAI,CAACM,QAAQ,CAAC;IAC7CyB,UAAU;IACV9B;EACF,CAAC;AACH","ignoreList":[]}