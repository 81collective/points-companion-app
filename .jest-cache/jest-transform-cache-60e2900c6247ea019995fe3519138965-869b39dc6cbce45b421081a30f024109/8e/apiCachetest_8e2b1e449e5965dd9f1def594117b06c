40739692e66525e5ecfdcd287374b76d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const apiCache_1 = require("../../lib/apiCache");
// Mock localStorage
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
};
Object.defineProperty(window, 'localStorage', {
    value: localStorageMock,
});
describe('apiCache', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        // Reset cache state
        apiCache_1.advancedApiCache.clear();
    });
    describe('Basic Cache Operations', () => {
        it('should store and retrieve data correctly', async () => {
            const testData = { message: 'Hello World' };
            const cacheKey = 'test-key';
            await apiCache_1.advancedApiCache.set(cacheKey, testData);
            const retrieved = await apiCache_1.advancedApiCache.get(cacheKey);
            expect(retrieved).toEqual(testData);
        });
        it('should return null for non-existent keys', async () => {
            const retrieved = await apiCache_1.advancedApiCache.get('non-existent-key');
            expect(retrieved).toBeNull();
        });
        it('should handle cache expiration', async () => {
            const testData = { message: 'Expires quickly' };
            const cacheKey = 'expiring-key';
            // Set with very short TTL (1ms)
            await apiCache_1.advancedApiCache.set(cacheKey, testData, { ttl: 1 });
            // Wait for expiration
            await new Promise(resolve => setTimeout(resolve, 2));
            const retrieved = await apiCache_1.advancedApiCache.get(cacheKey);
            expect(retrieved).toBeNull();
        });
        it('should clear all cache entries', async () => {
            await apiCache_1.advancedApiCache.set('key1', 'value1');
            await apiCache_1.advancedApiCache.set('key2', 'value2');
            apiCache_1.advancedApiCache.clear();
            expect(await apiCache_1.advancedApiCache.get('key1')).toBeNull();
            expect(await apiCache_1.advancedApiCache.get('key2')).toBeNull();
        });
    });
    describe('LRU Eviction', () => {
        it('should evict least recently used items when capacity is exceeded', async () => {
            // Set a small capacity for testing
            const originalCapacity = apiCache_1.advancedApiCache.capacity;
            apiCache_1.advancedApiCache.capacity = 3;
            await apiCache_1.advancedApiCache.set('key1', 'value1');
            await apiCache_1.advancedApiCache.set('key2', 'value2');
            await apiCache_1.advancedApiCache.set('key3', 'value3');
            await apiCache_1.advancedApiCache.set('key4', 'value4'); // This should evict key1
            expect(await apiCache_1.advancedApiCache.get('key1')).toBeNull();
            expect(await apiCache_1.advancedApiCache.get('key2')).toEqual('value2');
            expect(await apiCache_1.advancedApiCache.get('key3')).toEqual('value3');
            expect(await apiCache_1.advancedApiCache.get('key4')).toEqual('value4');
            // Restore original capacity
            apiCache_1.advancedApiCache.capacity = originalCapacity;
        });
        it('should update LRU order on access', async () => {
            const originalCapacity = apiCache_1.advancedApiCache.capacity;
            apiCache_1.advancedApiCache.capacity = 3;
            await apiCache_1.advancedApiCache.set('key1', 'value1');
            await apiCache_1.advancedApiCache.set('key2', 'value2');
            await apiCache_1.advancedApiCache.set('key3', 'value3');
            // Access key1 to make it most recently used
            await apiCache_1.advancedApiCache.get('key1');
            // Add key4, should evict key2 (least recently used)
            await apiCache_1.advancedApiCache.set('key4', 'value4');
            expect(await apiCache_1.advancedApiCache.get('key1')).toEqual('value1'); // Still there
            expect(await apiCache_1.advancedApiCache.get('key2')).toBeNull(); // Evicted
            expect(await apiCache_1.advancedApiCache.get('key3')).toEqual('value3');
            expect(await apiCache_1.advancedApiCache.get('key4')).toEqual('value4');
            apiCache_1.advancedApiCache.capacity = originalCapacity;
        });
    });
    describe('Cache Persistence', () => {
        it('should persist cache to localStorage', async () => {
            const testData = { persistent: true };
            await apiCache_1.advancedApiCache.set('persistent-key', testData);
            // Check that localStorage.setItem was called
            expect(localStorageMock.setItem).toHaveBeenCalled();
            const callArgs = localStorageMock.setItem.mock.calls.find(call => call[0] === 'api-cache-data');
            expect(callArgs).toBeTruthy();
        });
        it('should load cache from localStorage on initialization', () => {
            const mockCacheData = {
                'loaded-key': {
                    data: 'loaded-value',
                    timestamp: Date.now(),
                    ttl: 3600000,
                },
            };
            localStorageMock.getItem.mockReturnValue(JSON.stringify(mockCacheData));
            // Create new cache instance to test loading
            const newCache = require('../../lib/apiCache').apiCache;
            // The cache should have loaded the data
            expect(localStorageMock.getItem).toHaveBeenCalledWith('api-cache-data');
        });
    });
    describe('Cache Statistics', () => {
        it('should track cache hits and misses', async () => {
            await apiCache_1.advancedApiCache.set('stats-key', 'stats-value');
            // Hit
            await apiCache_1.advancedApiCache.get('stats-key');
            // Miss
            await apiCache_1.advancedApiCache.get('non-existent-key');
            const stats = apiCache_1.advancedApiCache.getStats();
            expect(stats.hits).toBe(1);
            expect(stats.misses).toBe(1);
            expect(apiCache_1.advancedApiCache.getHitRate()).toBe(0.5);
        });
        it('should track cache size and capacity', async () => {
            await apiCache_1.advancedApiCache.set('size-key1', 'value1');
            await apiCache_1.advancedApiCache.set('size-key2', 'value2');
            const stats = apiCache_1.advancedApiCache.getStats();
            expect(stats.size).toBeGreaterThan(0);
            expect(stats.itemCount).toBe(2);
        });
    });
    describe('Request Deduplication', () => {
        it('should deduplicate concurrent requests for the same key', async () => {
            let callCount = 0;
            const mockFetcher = jest.fn(() => {
                callCount++;
                return Promise.resolve('fetched-data');
            });
            // Simulate concurrent requests
            const promises = [
                apiCache_1.advancedApiCache.dedupe('dedupe-key', mockFetcher),
                apiCache_1.advancedApiCache.dedupe('dedupe-key', mockFetcher),
                apiCache_1.advancedApiCache.dedupe('dedupe-key', mockFetcher),
            ];
            const results = await Promise.all(promises);
            // All should return the same data
            results.forEach((result) => {
                expect(result).toBe('fetched-data');
            });
            // But fetcher should only be called once
            expect(callCount).toBe(1);
        });
        it('should handle fetch errors gracefully', async () => {
            const mockFetcher = jest.fn(() => Promise.reject(new Error('Fetch failed')));
            await expect(apiCache_1.advancedApiCache.dedupe('error-key', mockFetcher)).rejects.toThrow('Fetch failed');
            // Should not cache the error
            expect(await apiCache_1.advancedApiCache.get('error-key')).toBeNull();
        });
    });
    describe('Tag-based Invalidation', () => {
        it('should invalidate entries by tag', async () => {
            await apiCache_1.advancedApiCache.set('tagged-key1', 'value1', { tags: ['tag1'] });
            await apiCache_1.advancedApiCache.set('tagged-key2', 'value2', { tags: ['tag1', 'tag2'] });
            await apiCache_1.advancedApiCache.set('untagged-key', 'value3');
            apiCache_1.advancedApiCache.clearByTags(['tag1']);
            expect(await apiCache_1.advancedApiCache.get('tagged-key1')).toBeNull();
            expect(await apiCache_1.advancedApiCache.get('tagged-key2')).toBeNull();
            expect(await apiCache_1.advancedApiCache.get('untagged-key')).toEqual('value3');
        });
        it('should handle multiple tags correctly', async () => {
            await apiCache_1.advancedApiCache.set('multi-key', 'value', { tags: ['tag1', 'tag2', 'tag3'] });
            apiCache_1.advancedApiCache.clearByTags(['tag2']);
            expect(await apiCache_1.advancedApiCache.get('multi-key')).toBeNull();
        });
    });
    describe('Performance and Memory Management', () => {
        it('should handle large datasets efficiently', async () => {
            const largeData = Array.from({ length: 1000 }, (_, i) => ({
                id: i,
                data: 'x'.repeat(1000), // 1KB per item
            }));
            const startTime = performance.now();
            for (let i = 0; i < largeData.length; i++) {
                await apiCache_1.advancedApiCache.set(`large-key-${i}`, largeData[i]);
            }
            const endTime = performance.now();
            const duration = endTime - startTime;
            // Should complete within reasonable time (adjust threshold as needed)
            expect(duration).toBeLessThan(5000); // 5 seconds max
            // Should be able to retrieve items
            const retrieved = await apiCache_1.advancedApiCache.get('large-key-500');
            expect(retrieved).toEqual(largeData[500]);
        });
        it('should maintain performance under concurrent load', async () => {
            const concurrentOperations = 100;
            const promises = [];
            for (let i = 0; i < concurrentOperations; i++) {
                promises.push(apiCache_1.advancedApiCache.set(`concurrent-key-${i}`, `value-${i}`));
            }
            const startTime = performance.now();
            await Promise.all(promises);
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(2000); // 2 seconds max
            // Verify all operations completed
            for (let i = 0; i < concurrentOperations; i++) {
                const value = await apiCache_1.advancedApiCache.get(`concurrent-key-${i}`);
                expect(value).toBe(`value-${i}`);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,