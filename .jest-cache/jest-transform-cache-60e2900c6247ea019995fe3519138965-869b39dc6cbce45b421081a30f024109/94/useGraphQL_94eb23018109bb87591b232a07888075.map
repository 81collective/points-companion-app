{"version":3,"names":["_core","require","_react","BUSINESSES_QUERY","exports","gql","BUSINESS_DETAILS_QUERY","NEARBY_BUSINESSES_QUERY","useBusinessesQuery","variables","useQuery","useBusinessDetailsQuery","idOrVars","id","skip","useNearbyBusinessesQuery","normalized","lat","latitude","lng","longitude","radius","category","raw","data","Array","isArray","nearbyBusinesses","sort","a","b","distance"],"sources":["useGraphQL.ts"],"sourcesContent":["import { gql } from '@apollo/client/core';\r\nimport { useQuery } from '@apollo/client/react';\r\n\r\n// Types for GraphQL data and variables\r\nexport type Business = {\r\n  id: string;\r\n  name: string;\r\n  category?: string;\r\n  address?: string;\r\n  latitude?: number;\r\n  longitude?: number;\r\n  rating?: number;\r\n  priceLevel?: number;\r\n  distance?: number;\r\n  placeId?: string;\r\n};\r\n\r\nexport type Review = { id: string; author?: string; rating?: number; text?: string; time?: string };\r\nexport type Photo = { id: string; url?: string; width?: number; height?: number };\r\nexport type Hours = {\r\n  monday?: string;\r\n  tuesday?: string;\r\n  wednesday?: string;\r\n  thursday?: string;\r\n  friday?: string;\r\n  saturday?: string;\r\n  sunday?: string;\r\n};\r\n\r\nexport type BusinessesVariables = { limit?: number; category?: string; offset?: number };\r\nexport type BusinessesData = { businesses: Business[] };\r\n\r\nexport type BusinessDetailsVariables = { id: string };\r\nexport type BusinessDetails = Business & { reviews?: Review[]; photos?: Photo[]; hours?: Hours };\r\nexport type BusinessDetailsData = { business: BusinessDetails | null };\r\n\r\nexport type NearbyVariablesLatLng = { lat: number; lng: number; radius?: number; category?: string };\r\nexport type NearbyVariablesGps = { latitude: number; longitude: number; radius?: number; category?: string };\r\nexport type NearbyData = { nearbyBusinesses: Business[] };\r\n\r\n// Query documents exported for testing with MockedProvider\r\nexport const BUSINESSES_QUERY = gql`\r\n  query Businesses($limit: Int, $category: String, $offset: Int) {\r\n    businesses(limit: $limit, category: $category, offset: $offset) {\r\n      id\r\n      name\r\n      category\r\n  address\r\n  latitude\r\n  longitude\r\n  rating\r\n  priceLevel\r\n  distance\r\n  placeId\r\n    }\r\n  }\r\n`;\r\n\r\nexport const BUSINESS_DETAILS_QUERY = gql`\r\n  query BusinessDetails($id: ID!) {\r\n    business(id: $id) {\r\n      id\r\n      name\r\n  address\r\n      rating\r\n  priceLevel\r\n  distance\r\n  category\r\n  placeId\r\n  latitude\r\n  longitude\r\n  reviews { id author rating text time }\r\n  photos { id url width height }\r\n  hours { monday tuesday wednesday thursday friday saturday sunday }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NEARBY_BUSINESSES_QUERY = gql`\r\n  query NearbyBusinesses($lat: Float!, $lng: Float!, $radius: Int, $category: String) {\r\n    nearbyBusinesses(lat: $lat, lng: $lng, radius: $radius, category: $category) {\r\n      id\r\n      name\r\n      distance\r\n  latitude\r\n  longitude\r\n    }\r\n  }\r\n`;\r\n\r\nexport function useBusinessesQuery(\r\n  variables?: BusinessesVariables\r\n) {\r\n  // Standard Apollo signature: useQuery(query, options)\r\n  return useQuery<BusinessesData, BusinessesVariables>(BUSINESSES_QUERY, { variables });\r\n}\r\n\r\nexport function useBusinessDetailsQuery(idOrVars: string | BusinessDetailsVariables) {\r\n  const variables: BusinessDetailsVariables = typeof idOrVars === 'string' ? { id: idOrVars } : idOrVars;\r\n  return useQuery<BusinessDetailsData, BusinessDetailsVariables>(BUSINESS_DETAILS_QUERY, { variables, skip: !variables.id });\r\n}\r\n\r\nexport function useNearbyBusinessesQuery(\r\n  variables: NearbyVariablesLatLng | NearbyVariablesGps\r\n) {\r\n  const normalized: NearbyVariablesLatLng = 'lat' in variables\r\n    ? variables\r\n    : { lat: variables.latitude, lng: variables.longitude, radius: variables.radius, category: variables.category };\r\n\r\n  const raw = useQuery<NearbyData, NearbyVariablesLatLng>(NEARBY_BUSINESSES_QUERY, { variables: normalized, skip: !normalized.lat || !normalized.lng });\r\n\r\n  // Sort nearbyBusinesses by distance ascending if present\r\n  if (raw.data && Array.isArray(raw.data.nearbyBusinesses)) {\r\n    const data: NearbyData = {\r\n      ...raw.data,\r\n      nearbyBusinesses: [...raw.data.nearbyBusinesses].sort((a: Business, b: Business) => (a.distance ?? 0) - (b.distance ?? 0)),\r\n    };\r\n    return { ...raw, data } as typeof raw;\r\n  }\r\n  return raw;\r\n}\r\n"],"mappings":";;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAEA;;AAqCA;AACO,MAAME,gBAAgB,GAAAC,OAAA,CAAAD,gBAAA,GAAG,IAAAE,SAAG;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAEM,MAAMC,sBAAsB,GAAAF,OAAA,CAAAE,sBAAA,GAAG,IAAAD,SAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAEM,MAAME,uBAAuB,GAAAH,OAAA,CAAAG,uBAAA,GAAG,IAAAF,SAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAEM,SAASG,kBAAkBA,CAChCC,SAA+B,EAC/B;EACA;EACA,OAAO,IAAAC,eAAQ,EAAsCP,gBAAgB,EAAE;IAAEM;EAAU,CAAC,CAAC;AACvF;AAEO,SAASE,uBAAuBA,CAACC,QAA2C,EAAE;EACnF,MAAMH,SAAmC,GAAG,OAAOG,QAAQ,KAAK,QAAQ,GAAG;IAAEC,EAAE,EAAED;EAAS,CAAC,GAAGA,QAAQ;EACtG,OAAO,IAAAF,eAAQ,EAAgDJ,sBAAsB,EAAE;IAAEG,SAAS;IAAEK,IAAI,EAAE,CAACL,SAAS,CAACI;EAAG,CAAC,CAAC;AAC5H;AAEO,SAASE,wBAAwBA,CACtCN,SAAqD,EACrD;EACA,MAAMO,UAAiC,GAAG,KAAK,IAAIP,SAAS,GACxDA,SAAS,GACT;IAAEQ,GAAG,EAAER,SAAS,CAACS,QAAQ;IAAEC,GAAG,EAAEV,SAAS,CAACW,SAAS;IAAEC,MAAM,EAAEZ,SAAS,CAACY,MAAM;IAAEC,QAAQ,EAAEb,SAAS,CAACa;EAAS,CAAC;EAEjH,MAAMC,GAAG,GAAG,IAAAb,eAAQ,EAAoCH,uBAAuB,EAAE;IAAEE,SAAS,EAAEO,UAAU;IAAEF,IAAI,EAAE,CAACE,UAAU,CAACC,GAAG,IAAI,CAACD,UAAU,CAACG;EAAI,CAAC,CAAC;;EAErJ;EACA,IAAII,GAAG,CAACC,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACH,GAAG,CAACC,IAAI,CAACG,gBAAgB,CAAC,EAAE;IACxD,MAAMH,IAAgB,GAAG;MACvB,GAAGD,GAAG,CAACC,IAAI;MACXG,gBAAgB,EAAE,CAAC,GAAGJ,GAAG,CAACC,IAAI,CAACG,gBAAgB,CAAC,CAACC,IAAI,CAAC,CAACC,CAAW,EAAEC,CAAW,KAAK,CAACD,CAAC,CAACE,QAAQ,IAAI,CAAC,KAAKD,CAAC,CAACC,QAAQ,IAAI,CAAC,CAAC;IAC3H,CAAC;IACD,OAAO;MAAE,GAAGR,GAAG;MAAEC;IAAK,CAAC;EACzB;EACA,OAAOD,GAAG;AACZ","ignoreList":[]}