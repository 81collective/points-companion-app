bf741e6175896d8eeddc363b7f57b50c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Apollo Client
jest.mock('@apollo/client', () => ({
    useQuery: jest.fn(),
    useMutation: jest.fn(),
    gql: jest.fn((template) => template.join('')),
}));
const react_1 = __importDefault(require("react"));
const testUtils_1 = require("../testUtils");
const useGraphQL_1 = require("../../lib/graphql/useGraphQL");
// Setup mocks before tests
beforeAll(() => {
    (0, testUtils_1.setupTests)();
});
const client_1 = require("@apollo/client");
const mockUseQuery = client_1.useQuery;
const mockUseMutation = client_1.useMutation;
describe('GraphQL Hooks', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('useBusinessesQuery', () => {
        it('should return businesses data when query succeeds', async () => {
            const mockBusinesses = [
                {
                    id: '1',
                    name: 'Test Business',
                    address: '123 Test St',
                    latitude: 40.7128,
                    longitude: -74.0060,
                    rating: 4.5,
                    priceLevel: 2,
                    distance: 1000,
                    category: 'restaurant',
                    placeId: 'test_place_id',
                },
            ];
            mockUseQuery.mockReturnValue({
                data: { businesses: mockBusinesses },
                loading: false,
                error: undefined,
                refetch: jest.fn(),
            });
            // Test component that uses the hook
            const TestComponent = () => {
                const { data, loading, error } = (0, useGraphQL_1.useBusinessesQuery)({
                    category: 'restaurant',
                    limit: 10,
                });
                if (loading)
                    return <div>Loading...</div>;
                if (error)
                    return <div>Error: {error.message}</div>;
                return (<div>
            {data === null || data === void 0 ? void 0 : data.businesses.map(business => (<div key={business.id} data-testid={`business-${business.id}`}>
                {business.name}
              </div>))}
          </div>);
            };
            (0, testUtils_1.customRender)(<TestComponent />);
            await (0, testUtils_1.waitFor)(() => {
                expect(testUtils_1.screen.getByTestId('business-1')).toBeInTheDocument();
                expect(testUtils_1.screen.getByText('Test Business')).toBeInTheDocument();
            });
        });
        it('should handle loading state correctly', () => {
            mockUseQuery.mockReturnValue({
                data: undefined,
                loading: true,
                error: undefined,
                refetch: jest.fn(),
            });
            const TestComponent = () => {
                const { loading } = (0, useGraphQL_1.useBusinessesQuery)({
                    category: 'restaurant',
                    limit: 10,
                });
                return <div>{loading ? 'Loading...' : 'Loaded'}</div>;
            };
            (0, testUtils_1.customRender)(<TestComponent />);
            expect(testUtils_1.screen.getByText('Loading...')).toBeInTheDocument();
        });
        it('should handle error state correctly', () => {
            const mockError = new Error('GraphQL Error');
            mockUseQuery.mockReturnValue({
                data: undefined,
                loading: false,
                error: mockError,
                refetch: jest.fn(),
            });
            const TestComponent = () => {
                const { error } = (0, useGraphQL_1.useBusinessesQuery)({
                    category: 'restaurant',
                    limit: 10,
                });
                return <div>{error ? `Error: ${error.message}` : 'No error'}</div>;
            };
            (0, testUtils_1.customRender)(<TestComponent />);
            expect(testUtils_1.screen.getByText('Error: GraphQL Error')).toBeInTheDocument();
        });
        it('should pass correct variables to query', () => {
            const variables = {
                category: 'restaurant',
                limit: 20,
                offset: 10,
            };
            mockUseQuery.mockReturnValue({
                data: { businesses: [] },
                loading: false,
                error: undefined,
                refetch: jest.fn(),
            });
            (0, useGraphQL_1.useBusinessesQuery)(variables);
            expect(mockUseQuery).toHaveBeenCalledWith(expect.objectContaining({
                variables,
            }));
        });
    });
    describe('useBusinessDetailsQuery', () => {
        it('should return business details with proper structure', async () => {
            const mockBusinessDetails = {
                id: '1',
                name: 'Detailed Business',
                address: '123 Detail St',
                latitude: 40.7128,
                longitude: -74.0060,
                rating: 4.5,
                priceLevel: 3,
                distance: 500,
                category: 'restaurant',
                placeId: 'detailed_place_id',
                reviews: [
                    {
                        id: 'review1',
                        author: 'John Doe',
                        rating: 5,
                        text: 'Great place!',
                        time: '2023-01-01',
                    },
                ],
                photos: [
                    {
                        id: 'photo1',
                        url: 'https://example.com/photo1.jpg',
                        width: 800,
                        height: 600,
                    },
                ],
                hours: {
                    monday: '9:00 AM - 10:00 PM',
                    tuesday: '9:00 AM - 10:00 PM',
                    wednesday: '9:00 AM - 10:00 PM',
                    thursday: '9:00 AM - 10:00 PM',
                    friday: '9:00 AM - 11:00 PM',
                    saturday: '10:00 AM - 11:00 PM',
                    sunday: '10:00 AM - 9:00 PM',
                },
            };
            mockUseQuery.mockReturnValue({
                data: { business: mockBusinessDetails },
                loading: false,
                error: undefined,
                refetch: jest.fn(),
            });
            const TestComponent = () => {
                const { data } = (0, useGraphQL_1.useBusinessDetailsQuery)('1');
                return (<div>
            {(data === null || data === void 0 ? void 0 : data.business) && (<>
                <h1>{data.business.name}</h1>
                <p>{data.business.address}</p>
                <div>Rating: {data.business.rating}</div>
                <div>Reviews: {data.business.reviews.length}</div>
                <div>Photos: {data.business.photos.length}</div>
              </>)}
          </div>);
            };
            (0, testUtils_1.customRender)(<TestComponent />);
            await (0, testUtils_1.waitFor)(() => {
                expect(testUtils_1.screen.getByText('Detailed Business')).toBeInTheDocument();
                expect(testUtils_1.screen.getByText('123 Detail St')).toBeInTheDocument();
                expect(testUtils_1.screen.getByText('Rating: 4.5')).toBeInTheDocument();
                expect(testUtils_1.screen.getByText('Reviews: 1')).toBeInTheDocument();
                expect(testUtils_1.screen.getByText('Photos: 1')).toBeInTheDocument();
            });
        });
    });
    describe('useNearbyBusinessesQuery', () => {
        it('should handle location-based queries correctly', async () => {
            const mockNearbyBusinesses = [
                {
                    id: 'nearby1',
                    name: 'Nearby Restaurant',
                    distance: 200,
                    latitude: 40.7128,
                    longitude: -74.0060,
                },
                {
                    id: 'nearby2',
                    name: 'Another Nearby Place',
                    distance: 500,
                    latitude: 40.7130,
                    longitude: -74.0062,
                },
            ];
            mockUseQuery.mockReturnValue({
                data: { nearbyBusinesses: mockNearbyBusinesses },
                loading: false,
                error: undefined,
                refetch: jest.fn(),
            });
            const TestComponent = () => {
                const { data } = (0, useGraphQL_1.useNearbyBusinessesQuery)({
                    latitude: 40.7128,
                    longitude: -74.0060,
                    radius: 1000,
                    category: 'restaurant',
                });
                return (<div>
            {data === null || data === void 0 ? void 0 : data.nearbyBusinesses.map(business => (<div key={business.id} data-testid={`nearby-${business.id}`}>
                {business.name} - {business.distance}m
              </div>))}
          </div>);
            };
            (0, testUtils_1.customRender)(<TestComponent />);
            await (0, testUtils_1.waitFor)(() => {
                expect(testUtils_1.screen.getByTestId('nearby-nearby1')).toBeInTheDocument();
                expect(testUtils_1.screen.getByTestId('nearby-nearby2')).toBeInTheDocument();
                expect(testUtils_1.screen.getByText('Nearby Restaurant - 200m')).toBeInTheDocument();
                expect(testUtils_1.screen.getByText('Another Nearby Place - 500m')).toBeInTheDocument();
            });
        });
        it('should sort businesses by distance', async () => {
            const unsortedBusinesses = [
                {
                    id: 'far',
                    name: 'Far Business',
                    distance: 1000,
                    latitude: 40.7128,
                    longitude: -74.0060,
                },
                {
                    id: 'close',
                    name: 'Close Business',
                    distance: 100,
                    latitude: 40.7128,
                    longitude: -74.0060,
                },
            ];
            mockUseQuery.mockReturnValue({
                data: { nearbyBusinesses: unsortedBusinesses },
                loading: false,
                error: undefined,
                refetch: jest.fn(),
            });
            const TestComponent = () => {
                const { data } = (0, useGraphQL_1.useNearbyBusinessesQuery)({
                    latitude: 40.7128,
                    longitude: -74.0060,
                    radius: 1000,
                });
                return (<div>
            {data === null || data === void 0 ? void 0 : data.nearbyBusinesses.map(business => (<div key={business.id}>
                {business.name}
              </div>))}
          </div>);
            };
            (0, testUtils_1.customRender)(<TestComponent />);
            await (0, testUtils_1.waitFor)(() => {
                const businessElements = testUtils_1.screen.getAllByText(/Business/);
                // Should be sorted by distance (close first)
                expect(businessElements[0]).toHaveTextContent('Close Business');
                expect(businessElements[1]).toHaveTextContent('Far Business');
            });
        });
    });
    describe('GraphQL Error Handling', () => {
        it('should handle network errors gracefully', () => {
            const networkError = new Error('Network error');
            mockUseQuery.mockReturnValue({
                data: undefined,
                loading: false,
                error: networkError,
                refetch: jest.fn(),
            });
            const TestComponent = () => {
                const { error } = (0, useGraphQL_1.useBusinessesQuery)({ category: 'restaurant' });
                return <div>{error ? 'Network Error Occurred' : 'No Error'}</div>;
            };
            (0, testUtils_1.customRender)(<TestComponent />);
            expect(testUtils_1.screen.getByText('Network Error Occurred')).toBeInTheDocument();
        });
        it('should handle GraphQL validation errors', () => {
            const validationError = {
                message: 'Validation error',
                graphQLErrors: [
                    {
                        message: 'Invalid category parameter',
                        extensions: { code: 'VALIDATION_ERROR' },
                    },
                ],
            };
            mockUseQuery.mockReturnValue({
                data: undefined,
                loading: false,
                error: validationError,
                refetch: jest.fn(),
            });
            const TestComponent = () => {
                const { error } = (0, useGraphQL_1.useBusinessesQuery)({ category: 'invalid' });
                return <div>{error ? 'Validation Error' : 'No Error'}</div>;
            };
            (0, testUtils_1.customRender)(<TestComponent />);
            expect(testUtils_1.screen.getByText('Validation Error')).toBeInTheDocument();
        });
    });
    describe('GraphQL Performance', () => {
        it('should cache query results appropriately', async () => {
            const mockData = { businesses: [{ id: '1', name: 'Cached Business' }] };
            mockUseQuery.mockReturnValue({
                data: mockData,
                loading: false,
                error: undefined,
                refetch: jest.fn(),
            });
            const TestComponent = () => {
                var _a;
                const { data } = (0, useGraphQL_1.useBusinessesQuery)({ category: 'restaurant' });
                return <div>{(_a = data === null || data === void 0 ? void 0 : data.businesses[0]) === null || _a === void 0 ? void 0 : _a.name}</div>;
            };
            const { rerender } = (0, testUtils_1.customRender)(<TestComponent />);
            await (0, testUtils_1.waitFor)(() => {
                expect(testUtils_1.screen.getByText('Cached Business')).toBeInTheDocument();
            });
            // Re-render should use cached data
            rerender(<TestComponent />);
            expect(testUtils_1.screen.getByText('Cached Business')).toBeInTheDocument();
            expect(mockUseQuery).toHaveBeenCalledTimes(1); // Should not refetch
        });
        it('should handle concurrent queries efficiently', async () => {
            const mockData = { businesses: [{ id: '1', name: 'Concurrent Business' }] };
            mockUseQuery.mockReturnValue({
                data: mockData,
                loading: false,
                error: undefined,
                refetch: jest.fn(),
            });
            const TestComponent = () => {
                var _a, _b, _c, _d;
                const query1 = (0, useGraphQL_1.useBusinessesQuery)({ category: 'restaurant' });
                const query2 = (0, useGraphQL_1.useBusinessesQuery)({ category: 'restaurant' });
                return (<div>
            {(_b = (_a = query1.data) === null || _a === void 0 ? void 0 : _a.businesses[0]) === null || _b === void 0 ? void 0 : _b.name}
            {(_d = (_c = query2.data) === null || _c === void 0 ? void 0 : _c.businesses[0]) === null || _d === void 0 ? void 0 : _d.name}
          </div>);
            };
            (0, testUtils_1.customRender)(<TestComponent />);
            await (0, testUtils_1.waitFor)(() => {
                expect(testUtils_1.screen.getByText('Concurrent BusinessConcurrent Business')).toBeInTheDocument();
            });
            // Should deduplicate the query
            expect(mockUseQuery).toHaveBeenCalledTimes(1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,