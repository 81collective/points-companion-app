{"file":"C:\\Users\\Media Server\\Documents\\Projects\\points-companion-app\\src\\test\\graphql\\useGraphQL.test.tsx","mappings":"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","names":[],"sources":["C:\\Users\\Media Server\\Documents\\Projects\\points-companion-app\\src\\test\\graphql\\useGraphQL.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { customRender, screen, waitFor, setupTests } from '../testUtils';\r\nimport { useBusinessesQuery, useBusinessDetailsQuery, useNearbyBusinessesQuery } from '../../lib/graphql/useGraphQL';\r\n\r\n// Setup mocks before tests\r\nbeforeAll(() => {\r\n  setupTests();\r\n});\r\n\r\n// Mock Apollo Client\r\njest.mock('@apollo/client', () => ({\r\n  useQuery: jest.fn(),\r\n  useMutation: jest.fn(),\r\n  gql: jest.fn((template: TemplateStringsArray) => template.join('')),\r\n}));\r\n\r\nimport { useQuery, useMutation } from '@apollo/client';\r\n\r\nconst mockUseQuery = useQuery as jest.MockedFunction<typeof useQuery>;\r\nconst mockUseMutation = useMutation as jest.MockedFunction<typeof useMutation>;\r\n\r\ndescribe('GraphQL Hooks', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('useBusinessesQuery', () => {\r\n    it('should return businesses data when query succeeds', async () => {\r\n      const mockBusinesses = [\r\n        {\r\n          id: '1',\r\n          name: 'Test Business',\r\n          address: '123 Test St',\r\n          latitude: 40.7128,\r\n          longitude: -74.0060,\r\n          rating: 4.5,\r\n          priceLevel: 2,\r\n          distance: 1000,\r\n          category: 'restaurant',\r\n          placeId: 'test_place_id',\r\n        },\r\n      ];\r\n\r\n      mockUseQuery.mockReturnValue({\r\n        data: { businesses: mockBusinesses },\r\n        loading: false,\r\n        error: undefined,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      // Test component that uses the hook\r\n      const TestComponent = () => {\r\n        const { data, loading, error } = useBusinessesQuery({\r\n          category: 'restaurant',\r\n          limit: 10,\r\n        });\r\n\r\n        if (loading) return <div>Loading...</div>;\r\n        if (error) return <div>Error: {error.message}</div>;\r\n\r\n        return (\r\n          <div>\r\n            {data?.businesses.map(business => (\r\n              <div key={business.id} data-testid={`business-${business.id}`}>\r\n                {business.name}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        );\r\n      };\r\n\r\n      customRender(<TestComponent />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('business-1')).toBeInTheDocument();\r\n        expect(screen.getByText('Test Business')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    it('should handle loading state correctly', () => {\r\n      mockUseQuery.mockReturnValue({\r\n        data: undefined,\r\n        loading: true,\r\n        error: undefined,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      const TestComponent = () => {\r\n        const { loading } = useBusinessesQuery({\r\n          category: 'restaurant',\r\n          limit: 10,\r\n        });\r\n\r\n        return <div>{loading ? 'Loading...' : 'Loaded'}</div>;\r\n      };\r\n\r\n      customRender(<TestComponent />);\r\n\r\n      expect(screen.getByText('Loading...')).toBeInTheDocument();\r\n    });\r\n\r\n    it('should handle error state correctly', () => {\r\n      const mockError = new Error('GraphQL Error');\r\n      mockUseQuery.mockReturnValue({\r\n        data: undefined,\r\n        loading: false,\r\n        error: mockError,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      const TestComponent = () => {\r\n        const { error } = useBusinessesQuery({\r\n          category: 'restaurant',\r\n          limit: 10,\r\n        });\r\n\r\n        return <div>{error ? `Error: ${error.message}` : 'No error'}</div>;\r\n      };\r\n\r\n      customRender(<TestComponent />);\r\n\r\n      expect(screen.getByText('Error: GraphQL Error')).toBeInTheDocument();\r\n    });\r\n\r\n    it('should pass correct variables to query', () => {\r\n      const variables = {\r\n        category: 'restaurant',\r\n        limit: 20,\r\n        offset: 10,\r\n      };\r\n\r\n      mockUseQuery.mockReturnValue({\r\n        data: { businesses: [] },\r\n        loading: false,\r\n        error: undefined,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      useBusinessesQuery(variables);\r\n\r\n      expect(mockUseQuery).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          variables,\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('useBusinessDetailsQuery', () => {\r\n    it('should return business details with proper structure', async () => {\r\n      const mockBusinessDetails = {\r\n        id: '1',\r\n        name: 'Detailed Business',\r\n        address: '123 Detail St',\r\n        latitude: 40.7128,\r\n        longitude: -74.0060,\r\n        rating: 4.5,\r\n        priceLevel: 3,\r\n        distance: 500,\r\n        category: 'restaurant',\r\n        placeId: 'detailed_place_id',\r\n        reviews: [\r\n          {\r\n            id: 'review1',\r\n            author: 'John Doe',\r\n            rating: 5,\r\n            text: 'Great place!',\r\n            time: '2023-01-01',\r\n          },\r\n        ],\r\n        photos: [\r\n          {\r\n            id: 'photo1',\r\n            url: 'https://example.com/photo1.jpg',\r\n            width: 800,\r\n            height: 600,\r\n          },\r\n        ],\r\n        hours: {\r\n          monday: '9:00 AM - 10:00 PM',\r\n          tuesday: '9:00 AM - 10:00 PM',\r\n          wednesday: '9:00 AM - 10:00 PM',\r\n          thursday: '9:00 AM - 10:00 PM',\r\n          friday: '9:00 AM - 11:00 PM',\r\n          saturday: '10:00 AM - 11:00 PM',\r\n          sunday: '10:00 AM - 9:00 PM',\r\n        },\r\n      };\r\n\r\n      mockUseQuery.mockReturnValue({\r\n        data: { business: mockBusinessDetails },\r\n        loading: false,\r\n        error: undefined,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      const TestComponent = () => {\r\n        const { data } = useBusinessDetailsQuery('1');\r\n\r\n        return (\r\n          <div>\r\n            {data?.business && (\r\n              <>\r\n                <h1>{data.business.name}</h1>\r\n                <p>{data.business.address}</p>\r\n                <div>Rating: {data.business.rating}</div>\r\n                <div>Reviews: {data.business.reviews.length}</div>\r\n                <div>Photos: {data.business.photos.length}</div>\r\n              </>\r\n            )}\r\n          </div>\r\n        );\r\n      };\r\n\r\n      customRender(<TestComponent />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Detailed Business')).toBeInTheDocument();\r\n        expect(screen.getByText('123 Detail St')).toBeInTheDocument();\r\n        expect(screen.getByText('Rating: 4.5')).toBeInTheDocument();\r\n        expect(screen.getByText('Reviews: 1')).toBeInTheDocument();\r\n        expect(screen.getByText('Photos: 1')).toBeInTheDocument();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('useNearbyBusinessesQuery', () => {\r\n    it('should handle location-based queries correctly', async () => {\r\n      const mockNearbyBusinesses = [\r\n        {\r\n          id: 'nearby1',\r\n          name: 'Nearby Restaurant',\r\n          distance: 200,\r\n          latitude: 40.7128,\r\n          longitude: -74.0060,\r\n        },\r\n        {\r\n          id: 'nearby2',\r\n          name: 'Another Nearby Place',\r\n          distance: 500,\r\n          latitude: 40.7130,\r\n          longitude: -74.0062,\r\n        },\r\n      ];\r\n\r\n      mockUseQuery.mockReturnValue({\r\n        data: { nearbyBusinesses: mockNearbyBusinesses },\r\n        loading: false,\r\n        error: undefined,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      const TestComponent = () => {\r\n        const { data } = useNearbyBusinessesQuery({\r\n          latitude: 40.7128,\r\n          longitude: -74.0060,\r\n          radius: 1000,\r\n          category: 'restaurant',\r\n        });\r\n\r\n        return (\r\n          <div>\r\n            {data?.nearbyBusinesses.map(business => (\r\n              <div key={business.id} data-testid={`nearby-${business.id}`}>\r\n                {business.name} - {business.distance}m\r\n              </div>\r\n            ))}\r\n          </div>\r\n        );\r\n      };\r\n\r\n      customRender(<TestComponent />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('nearby-nearby1')).toBeInTheDocument();\r\n        expect(screen.getByTestId('nearby-nearby2')).toBeInTheDocument();\r\n        expect(screen.getByText('Nearby Restaurant - 200m')).toBeInTheDocument();\r\n        expect(screen.getByText('Another Nearby Place - 500m')).toBeInTheDocument();\r\n      });\r\n    });\r\n\r\n    it('should sort businesses by distance', async () => {\r\n      const unsortedBusinesses = [\r\n        {\r\n          id: 'far',\r\n          name: 'Far Business',\r\n          distance: 1000,\r\n          latitude: 40.7128,\r\n          longitude: -74.0060,\r\n        },\r\n        {\r\n          id: 'close',\r\n          name: 'Close Business',\r\n          distance: 100,\r\n          latitude: 40.7128,\r\n          longitude: -74.0060,\r\n        },\r\n      ];\r\n\r\n      mockUseQuery.mockReturnValue({\r\n        data: { nearbyBusinesses: unsortedBusinesses },\r\n        loading: false,\r\n        error: undefined,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      const TestComponent = () => {\r\n        const { data } = useNearbyBusinessesQuery({\r\n          latitude: 40.7128,\r\n          longitude: -74.0060,\r\n          radius: 1000,\r\n        });\r\n\r\n        return (\r\n          <div>\r\n            {data?.nearbyBusinesses.map(business => (\r\n              <div key={business.id}>\r\n                {business.name}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        );\r\n      };\r\n\r\n      customRender(<TestComponent />);\r\n\r\n      await waitFor(() => {\r\n        const businessElements = screen.getAllByText(/Business/);\r\n        // Should be sorted by distance (close first)\r\n        expect(businessElements[0]).toHaveTextContent('Close Business');\r\n        expect(businessElements[1]).toHaveTextContent('Far Business');\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('GraphQL Error Handling', () => {\r\n    it('should handle network errors gracefully', () => {\r\n      const networkError = new Error('Network error');\r\n      mockUseQuery.mockReturnValue({\r\n        data: undefined,\r\n        loading: false,\r\n        error: networkError,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      const TestComponent = () => {\r\n        const { error } = useBusinessesQuery({ category: 'restaurant' });\r\n        return <div>{error ? 'Network Error Occurred' : 'No Error'}</div>;\r\n      };\r\n\r\n      customRender(<TestComponent />);\r\n\r\n      expect(screen.getByText('Network Error Occurred')).toBeInTheDocument();\r\n    });\r\n\r\n    it('should handle GraphQL validation errors', () => {\r\n      const validationError = {\r\n        message: 'Validation error',\r\n        graphQLErrors: [\r\n          {\r\n            message: 'Invalid category parameter',\r\n            extensions: { code: 'VALIDATION_ERROR' },\r\n          },\r\n        ],\r\n      };\r\n\r\n      mockUseQuery.mockReturnValue({\r\n        data: undefined,\r\n        loading: false,\r\n        error: validationError,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      const TestComponent = () => {\r\n        const { error } = useBusinessesQuery({ category: 'invalid' });\r\n        return <div>{error ? 'Validation Error' : 'No Error'}</div>;\r\n      };\r\n\r\n      customRender(<TestComponent />);\r\n\r\n      expect(screen.getByText('Validation Error')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('GraphQL Performance', () => {\r\n    it('should cache query results appropriately', async () => {\r\n      const mockData = { businesses: [{ id: '1', name: 'Cached Business' }] };\r\n\r\n      mockUseQuery.mockReturnValue({\r\n        data: mockData,\r\n        loading: false,\r\n        error: undefined,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      const TestComponent = () => {\r\n        const { data } = useBusinessesQuery({ category: 'restaurant' });\r\n        return <div>{data?.businesses[0]?.name}</div>;\r\n      };\r\n\r\n      const { rerender } = customRender(<TestComponent />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Cached Business')).toBeInTheDocument();\r\n      });\r\n\r\n      // Re-render should use cached data\r\n      rerender(<TestComponent />);\r\n\r\n      expect(screen.getByText('Cached Business')).toBeInTheDocument();\r\n      expect(mockUseQuery).toHaveBeenCalledTimes(1); // Should not refetch\r\n    });\r\n\r\n    it('should handle concurrent queries efficiently', async () => {\r\n      const mockData = { businesses: [{ id: '1', name: 'Concurrent Business' }] };\r\n\r\n      mockUseQuery.mockReturnValue({\r\n        data: mockData,\r\n        loading: false,\r\n        error: undefined,\r\n        refetch: jest.fn(),\r\n      });\r\n\r\n      const TestComponent = () => {\r\n        const query1 = useBusinessesQuery({ category: 'restaurant' });\r\n        const query2 = useBusinessesQuery({ category: 'restaurant' });\r\n\r\n        return (\r\n          <div>\r\n            {query1.data?.businesses[0]?.name}\r\n            {query2.data?.businesses[0]?.name}\r\n          </div>\r\n        );\r\n      };\r\n\r\n      customRender(<TestComponent />);\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Concurrent BusinessConcurrent Business')).toBeInTheDocument();\r\n      });\r\n\r\n      // Should deduplicate the query\r\n      expect(mockUseQuery).toHaveBeenCalledTimes(1);\r\n    });\r\n  });\r\n});\r\n"],"version":3}