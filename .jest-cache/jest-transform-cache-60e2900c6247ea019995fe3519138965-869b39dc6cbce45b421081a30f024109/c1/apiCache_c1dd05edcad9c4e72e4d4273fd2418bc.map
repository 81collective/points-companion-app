{"file":"C:\\Users\\Media Server\\Documents\\Projects\\points-companion-app\\src\\lib\\apiCache.ts","mappings":"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","names":[],"sources":["C:\\Users\\Media Server\\Documents\\Projects\\points-companion-app\\src\\lib\\apiCache.ts"],"sourcesContent":["// Advanced Redis-like in-memory cache with LRU eviction, persistence, and advanced features\r\ninterface CacheEntry<T = unknown> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number;\r\n  accessCount: number;\r\n  lastAccessed: number;\r\n  size: number; // Estimated size in bytes\r\n  tags?: string[]; // For cache invalidation by tags\r\n}\r\n\r\ninterface CacheStats {\r\n  hits: number;\r\n  misses: number;\r\n  evictions: number;\r\n  sets: number;\r\n  deletes: number;\r\n  size: number; // Total cache size in bytes\r\n  itemCount: number;\r\n}\r\n\r\ninterface CacheConfig {\r\n  maxSize: number; // Maximum cache size in bytes\r\n  defaultTTL: number; // Default TTL in milliseconds\r\n  enablePersistence: boolean;\r\n  persistenceKey: string;\r\n  enableCompression: boolean;\r\n  lruEnabled: boolean;\r\n}\r\n\r\nclass AdvancedAPICache {\r\n  private cache = new Map<string, CacheEntry>();\r\n  private pendingRequests = new Map<string, Promise<unknown>>();\r\n  private stats: CacheStats = {\r\n    hits: 0,\r\n    misses: 0,\r\n    evictions: 0,\r\n    sets: 0,\r\n    deletes: 0,\r\n    size: 0,\r\n    itemCount: 0\r\n  };\r\n\r\n  private config: CacheConfig = {\r\n    maxSize: 50 * 1024 * 1024, // 50MB default\r\n    defaultTTL: 5 * 60 * 1000, // 5 minutes\r\n    enablePersistence: true,\r\n    persistenceKey: 'api-cache-persistence',\r\n    enableCompression: false,\r\n    lruEnabled: true\r\n  };\r\n\r\n  constructor(config?: Partial<CacheConfig>) {\r\n    if (config) {\r\n      this.config = { ...this.config, ...config };\r\n    }\r\n\r\n    // Load persisted cache on initialization\r\n    if (this.config.enablePersistence && typeof window !== 'undefined') {\r\n      this.loadPersistedCache();\r\n    }\r\n\r\n    // Set up periodic cleanup and persistence\r\n    if (typeof global !== 'undefined') {\r\n      setInterval(() => {\r\n        this.cleanup();\r\n        if (this.config.enablePersistence) {\r\n          this.persistCache();\r\n        }\r\n      }, 60000); // Every minute\r\n    }\r\n  }\r\n\r\n  // Generate cache key from request parameters with advanced hashing\r\n  generateKey(params: Record<string, unknown>, prefix = 'api'): string {\r\n    const sortedParams = Object.keys(params)\r\n      .sort()\r\n      .reduce((result, key) => {\r\n        result[key] = params[key];\r\n        return result;\r\n      }, {} as Record<string, unknown>);\r\n\r\n    const paramString = JSON.stringify(sortedParams);\r\n    return `${prefix}:${this.simpleHash(paramString)}`;\r\n  }\r\n\r\n  // Simple hash function for cache keys\r\n  private simpleHash(str: string): string {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash).toString(36);\r\n  }\r\n\r\n  // Estimate size of data in bytes\r\n  private estimateSize(data: unknown): number {\r\n    const str = JSON.stringify(data);\r\n    return str ? str.length * 2 : 0; // Rough estimate: 2 bytes per character\r\n  }\r\n\r\n  // Get cached data with LRU tracking\r\n  get<T = unknown>(key: string): T | null {\r\n    const entry = this.cache.get(key);\r\n    if (!entry) {\r\n      this.stats.misses++;\r\n      return null;\r\n    }\r\n\r\n    const now = Date.now();\r\n    if (now - entry.timestamp > entry.ttl) {\r\n      this.cache.delete(key);\r\n      this.stats.size -= entry.size;\r\n      this.stats.itemCount--;\r\n      this.stats.misses++;\r\n      return null;\r\n    }\r\n\r\n    // Update LRU tracking\r\n    entry.accessCount++;\r\n    entry.lastAccessed = now;\r\n    this.stats.hits++;\r\n\r\n    return entry.data as T;\r\n  }\r\n\r\n  // Set cache entry with advanced features\r\n  set<T = unknown>(\r\n    key: string,\r\n    data: T,\r\n    options: {\r\n      ttl?: number;\r\n      tags?: string[];\r\n      compress?: boolean;\r\n    } = {}\r\n  ): void {\r\n    const ttl = options.ttl || this.config.defaultTTL;\r\n    const size = this.estimateSize(data);\r\n    const now = Date.now();\r\n\r\n    // Check if we need to evict entries to make room\r\n    if (this.stats.size + size > this.config.maxSize) {\r\n      this.evictLRU(size);\r\n    }\r\n\r\n    const entry: CacheEntry<T> = {\r\n      data,\r\n      timestamp: now,\r\n      ttl,\r\n      accessCount: 0,\r\n      lastAccessed: now,\r\n      size,\r\n      tags: options.tags\r\n    };\r\n\r\n    // Remove old entry if it exists\r\n    const oldEntry = this.cache.get(key);\r\n    if (oldEntry) {\r\n      this.stats.size -= oldEntry.size;\r\n      this.stats.itemCount--;\r\n    }\r\n\r\n    this.cache.set(key, entry);\r\n    this.stats.size += size;\r\n    this.stats.itemCount++;\r\n    this.stats.sets++;\r\n  }\r\n\r\n  // LRU eviction\r\n  private evictLRU(requiredSpace: number): void {\r\n    if (!this.config.lruEnabled) return;\r\n\r\n    const entries = Array.from(this.cache.entries())\r\n      .sort(([, a], [, b]) => {\r\n        // Sort by access count, then by last accessed time\r\n        if (a.accessCount !== b.accessCount) {\r\n          return a.accessCount - b.accessCount;\r\n        }\r\n        return a.lastAccessed - b.lastAccessed;\r\n      });\r\n\r\n    let freedSpace = 0;\r\n    for (const [key, entry] of entries) {\r\n      if (freedSpace >= requiredSpace) break;\r\n\r\n      this.cache.delete(key);\r\n      this.stats.size -= entry.size;\r\n      this.stats.itemCount--;\r\n      this.stats.evictions++;\r\n      freedSpace += entry.size;\r\n    }\r\n  }\r\n\r\n  // Delete cache entry\r\n  delete(key: string): boolean {\r\n    const entry = this.cache.get(key);\r\n    if (entry) {\r\n      this.cache.delete(key);\r\n      this.stats.size -= entry.size;\r\n      this.stats.itemCount--;\r\n      this.stats.deletes++;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Clear cache by tags\r\n  clearByTags(tags: string[]): number {\r\n    let cleared = 0;\r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (entry.tags && entry.tags.some(tag => tags.includes(tag))) {\r\n        this.cache.delete(key);\r\n        this.stats.size -= entry.size;\r\n        this.stats.itemCount--;\r\n        this.stats.deletes++;\r\n        cleared++;\r\n      }\r\n    }\r\n    return cleared;\r\n  }\r\n\r\n  // Clear all cache\r\n  clear(): void {\r\n    this.cache.clear();\r\n    this.stats.size = 0;\r\n    this.stats.itemCount = 0;\r\n    this.stats.deletes += this.stats.itemCount;\r\n  }\r\n\r\n  // Handle request deduplication with enhanced error handling\r\n  async dedupe<T>(\r\n    key: string,\r\n    requestFn: () => Promise<T>,\r\n    options: {\r\n      ttl?: number;\r\n      tags?: string[];\r\n      useCache?: boolean;\r\n    } = {}\r\n  ): Promise<T> {\r\n    // Check cache first if enabled\r\n    if (options.useCache !== false) {\r\n      const cached = this.get<T>(key);\r\n      if (cached !== null) {\r\n        return cached;\r\n      }\r\n    }\r\n\r\n    // Check if request is already pending\r\n    const pending = this.pendingRequests.get(key);\r\n    if (pending) {\r\n      return pending as Promise<T>;\r\n    }\r\n\r\n    // Execute request and cache the promise\r\n    const promise = requestFn()\r\n      .then(result => {\r\n        // Cache successful results\r\n        if (options.useCache !== false) {\r\n          this.set(key, result, {\r\n            ttl: options.ttl,\r\n            tags: options.tags\r\n          });\r\n        }\r\n        return result;\r\n      })\r\n      .finally(() => {\r\n        this.pendingRequests.delete(key);\r\n      });\r\n\r\n    this.pendingRequests.set(key, promise);\r\n    return promise;\r\n  }\r\n\r\n  // Get cache statistics\r\n  getStats(): CacheStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  // Get cache hit rate\r\n  getHitRate(): number {\r\n    const total = this.stats.hits + this.stats.misses;\r\n    return total > 0 ? this.stats.hits / total : 0;\r\n  }\r\n\r\n  // Cleanup expired entries\r\n  cleanup(): void {\r\n    const now = Date.now();\r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (now - entry.timestamp > entry.ttl) {\r\n        this.cache.delete(key);\r\n        this.stats.size -= entry.size;\r\n        this.stats.itemCount--;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Persist cache to localStorage\r\n  private persistCache(): void {\r\n    if (typeof window === 'undefined' || !window.localStorage) return;\r\n\r\n    try {\r\n      const persistableData = Array.from(this.cache.entries())\r\n        .filter(([, entry]) => {\r\n          // Only persist entries that haven't expired and aren't too large\r\n          const now = Date.now();\r\n          return (now - entry.timestamp < entry.ttl) && entry.size < 1024 * 1024; // < 1MB\r\n        })\r\n        .map(([key, entry]) => [key, {\r\n          data: entry.data,\r\n          timestamp: entry.timestamp,\r\n          ttl: entry.ttl,\r\n          accessCount: entry.accessCount,\r\n          lastAccessed: entry.lastAccessed,\r\n          size: entry.size,\r\n          tags: entry.tags\r\n        }]);\r\n\r\n      localStorage.setItem(this.config.persistenceKey, JSON.stringify({\r\n        data: persistableData,\r\n        timestamp: Date.now()\r\n      }));\r\n    } catch (error) {\r\n      console.warn('Failed to persist cache:', error);\r\n    }\r\n  }\r\n\r\n  // Load persisted cache from localStorage\r\n  private loadPersistedCache(): void {\r\n    if (typeof window === 'undefined' || !window.localStorage) return;\r\n\r\n    try {\r\n      const persisted = localStorage.getItem(this.config.persistenceKey);\r\n      if (!persisted) return;\r\n\r\n      const { data, timestamp } = JSON.parse(persisted);\r\n      const now = Date.now();\r\n\r\n      // Only load if persisted within last 24 hours\r\n      if (now - timestamp > 24 * 60 * 60 * 1000) {\r\n        localStorage.removeItem(this.config.persistenceKey);\r\n        return;\r\n      }\r\n\r\n      for (const [key, entry] of data) {\r\n        // Check if entry is still valid\r\n        if (now - entry.timestamp < entry.ttl) {\r\n          this.cache.set(key, entry);\r\n          this.stats.size += entry.size;\r\n          this.stats.itemCount++;\r\n        }\r\n      }\r\n\r\n      console.log(`Loaded ${this.stats.itemCount} persisted cache entries`);\r\n    } catch (error) {\r\n      console.warn('Failed to load persisted cache:', error);\r\n      localStorage.removeItem(this.config.persistenceKey);\r\n    }\r\n  }\r\n\r\n  // Warm up cache with frequently accessed data\r\n  async warmup(keys: string[]): Promise<void> {\r\n    const warmupPromises = keys.map(async (key) => {\r\n      // This would typically fetch from a fast source or pre-computed data\r\n      // For now, just ensure the key exists in cache\r\n      return this.cache.has(key);\r\n    });\r\n\r\n    await Promise.all(warmupPromises);\r\n  }\r\n}\r\n\r\n// Global advanced cache instance with optimized settings\r\nexport const advancedApiCache = new AdvancedAPICache({\r\n  maxSize: 100 * 1024 * 1024, // 100MB for better performance\r\n  defaultTTL: 10 * 60 * 1000, // 10 minutes for better cache hit rates\r\n  enablePersistence: true,\r\n  persistenceKey: 'points-companion-cache-v2',\r\n  enableCompression: false, // Can be enabled later with compression library\r\n  lruEnabled: true\r\n});\r\n\r\n// Legacy cache instance for backward compatibility\r\nexport const apiCache = advancedApiCache;\r\n\r\n// Cache warming utility\r\nexport const warmupCache = async (frequentlyUsedKeys: string[]) => {\r\n  await advancedApiCache.warmup(frequentlyUsedKeys);\r\n};\r\n\r\n// Cache monitoring utility\r\nexport const getCacheMetrics = () => {\r\n  const stats = advancedApiCache.getStats();\r\n  const hitRate = advancedApiCache.getHitRate();\r\n\r\n  return {\r\n    ...stats,\r\n    hitRate: `${(hitRate * 100).toFixed(2)}%`,\r\n    sizeFormatted: `${(stats.size / 1024 / 1024).toFixed(2)}MB`,\r\n    efficiency: hitRate > 0.8 ? 'Excellent' : hitRate > 0.6 ? 'Good' : 'Needs Optimization'\r\n  };\r\n};\r\n"],"version":3}