50fcf48935234200654d163c1cd921b7
"use strict";
// Testing utilities and setup for Points Companion App
// Provides comprehensive test coverage with 80%+ target
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupTests = exports.mockServiceWorker = exports.expectAccessible = exports.expectPerformance = exports.measureRenderTime = exports.mockFetchError = exports.mockFetchResponse = exports.expectErrorState = exports.expectLoadingState = exports.waitForLoadingToFinish = exports.createMockUser = exports.createMockCardRecommendation = exports.createMockBusiness = exports.mockSupabase = exports.mockGoogleMaps = exports.mockGeolocation = exports.customRender = exports.TestWrapper = exports.createTestQueryClient = void 0;
const globals_1 = require("@jest/globals");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
// Test Query Client
const createTestQueryClient = () => new react_query_1.QueryClient({
    defaultOptions: {
        queries: {
            retry: false,
            gcTime: 0,
        },
        mutations: {
            retry: false,
        },
    },
});
exports.createTestQueryClient = createTestQueryClient;
// Test Wrapper with Query Client
const TestWrapper = ({ children }) => {
    const queryClient = (0, exports.createTestQueryClient)();
    return react_1.default.createElement(react_query_1.QueryClientProvider, { client: queryClient }, children);
};
exports.TestWrapper = TestWrapper;
// Custom render function
const customRender = (ui, options = {}) => (0, react_2.render)(ui, Object.assign({ wrapper: exports.TestWrapper }, options));
exports.customRender = customRender;
// Re-export everything
__exportStar(require("@testing-library/react"), exports);
// Mock implementations
exports.mockGeolocation = {
    getCurrentPosition: globals_1.jest.fn(),
    watchPosition: globals_1.jest.fn(),
    clearWatch: globals_1.jest.fn(),
};
exports.mockGoogleMaps = {
    Maps: globals_1.jest.fn(),
    places: {
        PlacesService: globals_1.jest.fn(),
        PlacesServiceStatus: {
            OK: 'OK',
            ZERO_RESULTS: 'ZERO_RESULTS',
        },
    },
};
exports.mockSupabase = {
    from: globals_1.jest.fn(() => ({
        select: globals_1.jest.fn(() => ({
            eq: globals_1.jest.fn(() => ({
                single: globals_1.jest.fn(() => Promise.resolve({ data: null, error: null })),
            })),
        })),
        insert: globals_1.jest.fn(() => Promise.resolve({ error: null })),
        update: globals_1.jest.fn(() => Promise.resolve({ error: null })),
        delete: globals_1.jest.fn(() => Promise.resolve({ error: null })),
    })),
};
// Test data factories
const createMockBusiness = (overrides = {}) => (Object.assign({ id: 'test-business-1', name: 'Test Restaurant', address: '123 Test St', category: 'restaurant', latitude: 40.7128, longitude: -74.0060, rating: 4.5, price_level: 2, distance: 1000, place_id: 'test_place_id' }, overrides));
exports.createMockBusiness = createMockBusiness;
const createMockCardRecommendation = (overrides = {}) => (Object.assign({ id: 'test-card-1', name: 'Test Rewards Card', issuer: 'Test Bank', category: 'dining', rewardRate: 3.0, annualFee: 95, signupBonus: 'Earn 50,000 points', features: ['3x points on dining', 'No foreign transaction fees'], matchScore: 85 }, overrides));
exports.createMockCardRecommendation = createMockCardRecommendation;
const createMockUser = (overrides = {}) => (Object.assign({ id: 'test-user-1', email: 'test@example.com', name: 'Test User', preferences: {
        favoriteCategories: ['dining', 'travel'],
        notificationSettings: {
            email: true,
            push: true,
            sms: false,
        },
    } }, overrides));
exports.createMockUser = createMockUser;
// Test utilities
const waitForLoadingToFinish = () => (0, react_2.waitFor)(() => {
    expect(react_2.screen.queryByTestId('loading')).not.toBeInTheDocument();
}, { timeout: 5000 });
exports.waitForLoadingToFinish = waitForLoadingToFinish;
const expectLoadingState = () => {
    expect(react_2.screen.getByTestId('loading')).toBeInTheDocument();
};
exports.expectLoadingState = expectLoadingState;
const expectErrorState = (message) => {
    expect(react_2.screen.getByTestId('error')).toBeInTheDocument();
    if (message) {
        expect(react_2.screen.getByText(message)).toBeInTheDocument();
    }
};
exports.expectErrorState = expectErrorState;
const mockFetchResponse = (data, ok = true) => {
    global.fetch = globals_1.jest.fn(() => Promise.resolve({
        ok,
        json: () => Promise.resolve(data),
        text: () => Promise.resolve(JSON.stringify(data)),
    }));
};
exports.mockFetchResponse = mockFetchResponse;
const mockFetchError = (error) => {
    global.fetch = globals_1.jest.fn(() => Promise.reject(error));
};
exports.mockFetchError = mockFetchError;
// Performance testing utilities
const measureRenderTime = async (component) => {
    const startTime = performance.now();
    (0, exports.customRender)(component);
    await (0, react_2.waitFor)(() => {
        expect(document.body).toBeInTheDocument();
    });
    const endTime = performance.now();
    return endTime - startTime;
};
exports.measureRenderTime = measureRenderTime;
const expectPerformance = (renderTime, threshold = 100) => {
    expect(renderTime).toBeLessThan(threshold);
};
exports.expectPerformance = expectPerformance;
// Accessibility testing utilities
const expectAccessible = (container) => {
    // Check for ARIA labels
    const buttons = container.querySelectorAll('button');
    buttons.forEach(button => {
        expect(button).toHaveAttribute('aria-label');
    });
    // Check for alt text on images
    const images = container.querySelectorAll('img');
    images.forEach(img => {
        expect(img).toHaveAttribute('alt');
    });
    // Check for proper heading hierarchy
    const headings = container.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let lastLevel = 0;
    headings.forEach(heading => {
        const level = parseInt(heading.tagName.charAt(1));
        expect(level).toBeGreaterThanOrEqual(lastLevel);
        lastLevel = level;
    });
};
exports.expectAccessible = expectAccessible;
// Mock service worker
exports.mockServiceWorker = {
    register: globals_1.jest.fn(() => Promise.resolve({
        active: { state: 'activated' },
        waiting: null,
        installing: null,
    })),
    addEventListener: globals_1.jest.fn(),
    removeEventListener: globals_1.jest.fn(),
};
// Setup function for all tests
const setupTests = () => {
    // Mock window methods
    Object.defineProperty(window, 'matchMedia', {
        writable: true,
        value: globals_1.jest.fn().mockImplementation(query => ({
            matches: false,
            media: query,
            onchange: null,
            addListener: globals_1.jest.fn(),
            removeListener: globals_1.jest.fn(),
            addEventListener: globals_1.jest.fn(),
            removeEventListener: globals_1.jest.fn(),
            dispatchEvent: globals_1.jest.fn(),
        })),
    });
    // Mock IntersectionObserver
    const mockIntersectionObserver = globals_1.jest.fn().mockImplementation(() => ({
        observe: globals_1.jest.fn(),
        unobserve: globals_1.jest.fn(),
        disconnect: globals_1.jest.fn(),
    }));
    global.IntersectionObserver = mockIntersectionObserver;
    // Mock ResizeObserver
    const mockResizeObserver = globals_1.jest.fn().mockImplementation(() => ({
        observe: globals_1.jest.fn(),
        unobserve: globals_1.jest.fn(),
        disconnect: globals_1.jest.fn(),
    }));
    global.ResizeObserver = mockResizeObserver;
    // Mock geolocation
    Object.defineProperty(navigator, 'geolocation', {
        value: exports.mockGeolocation,
        writable: true,
    });
    // Mock service worker
    Object.defineProperty(navigator, 'serviceWorker', {
        value: exports.mockServiceWorker,
        writable: true,
    });
    // Mock Google Maps
    global.google = exports.mockGoogleMaps;
    // Mock localStorage
    const localStorageMock = {
        getItem: globals_1.jest.fn(),
        setItem: globals_1.jest.fn(),
        removeItem: globals_1.jest.fn(),
        clear: globals_1.jest.fn(),
    };
    Object.defineProperty(window, 'localStorage', {
        value: localStorageMock,
    });
    // Mock sessionStorage
    const sessionStorageMock = {
        getItem: globals_1.jest.fn(),
        setItem: globals_1.jest.fn(),
        removeItem: globals_1.jest.fn(),
        clear: globals_1.jest.fn(),
    };
    Object.defineProperty(window, 'sessionStorage', {
        value: sessionStorageMock,
    });
};
exports.setupTests = setupTests;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,