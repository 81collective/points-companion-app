ee786109a54bea23bbe80b8901c06976
"use strict";

var _react = _interopRequireDefault(require("react"));
var _testUtils = require("../testUtils");
var _client = require("@apollo/client");
var _react2 = require("@apollo/client/react");
var _core = require("@apollo/client/core");
var _graphql = require("graphql");
var _useGraphQL = require("../../lib/graphql/useGraphQL");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// Setup mocks before tests
beforeAll(() => {
  (0, _testUtils.setupTests)();
});

// Helper to create an ApolloClient with a simple mock link

const createClientWithMocks = mocks => {
  const link = new _core.ApolloLink(operation => new _core.Observable(observer => {
    const opName = operation.operationName;
    const opQueryStr = (0, _graphql.print)(operation.query);
    const match = mocks.find(m => {
      const reqName = m.request.operationName;
      const reqQueryStr = m.request.query && (0, _graphql.print)(m.request.query);
      const nameMatches = reqName ? reqName === opName : true;
      const queryMatches = reqQueryStr ? reqQueryStr === opQueryStr : true;
      const varsMatch = JSON.stringify(m.request.variables ?? {}) === JSON.stringify(operation.variables ?? {});
      return nameMatches && queryMatches && varsMatch;
    });
    setTimeout(() => {
      if (!match) {
        // Leave observable pending so tests can assert loading state
        return;
      }
      if (match.error) {
        observer.error(match.error);
        return;
      }
      observer.next(match.result);
      observer.complete();
    }, 0);
  }));
  return new _client.ApolloClient({
    cache: new _client.InMemoryCache(),
    link
  });
};

// Helper to render with ApolloProvider
const renderWithApollo = (ui, mocks = []) => {
  const client = createClientWithMocks(mocks);
  return (0, _testUtils.customRender)(/*#__PURE__*/_react.default.createElement(_react2.ApolloProvider, {
    client: client
  }, ui));
};
describe('GraphQL Hooks', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  describe('useBusinessesQuery', () => {
    it('should return businesses data when query succeeds', async () => {
      const mockBusinesses = [{
        id: '1',
        name: 'Test Business',
        address: '123 Test St',
        latitude: 40.7128,
        longitude: -74.0060,
        rating: 4.5,
        priceLevel: 2,
        distance: 1000,
        category: 'restaurant',
        placeId: 'test_place_id'
      }];
      const mocks = [{
        request: {
          operationName: 'Businesses',
          query: _useGraphQL.BUSINESSES_QUERY,
          variables: {
            category: 'restaurant',
            limit: 10
          }
        },
        result: {
          data: {
            businesses: mockBusinesses
          }
        }
      }];

      // Test component that uses the hook
      const TestComponent = () => {
        const {
          data,
          loading,
          error
        } = (0, _useGraphQL.useBusinessesQuery)({
          category: 'restaurant',
          limit: 10
        });
        if (loading) return /*#__PURE__*/_react.default.createElement("div", null, "Loading...");
        if (error) return /*#__PURE__*/_react.default.createElement("div", null, "Error: ", error.message);
        return /*#__PURE__*/_react.default.createElement("div", null, data?.businesses.map(business => /*#__PURE__*/_react.default.createElement("div", {
          key: business.id,
          "data-testid": `business-${business.id}`
        }, business.name)));
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      await (0, _testUtils.waitFor)(() => {
        expect(_testUtils.screen.getByTestId('business-1')).toBeInTheDocument();
        expect(_testUtils.screen.getByText('Test Business')).toBeInTheDocument();
      });
    });
    it('should handle loading state correctly', () => {
      const mocks = []; // no mocks to simulate loading until resolved

      const TestComponent = () => {
        const {
          loading
        } = (0, _useGraphQL.useBusinessesQuery)({
          category: 'restaurant',
          limit: 10
        });
        return /*#__PURE__*/_react.default.createElement("div", null, loading ? 'Loading...' : 'Loaded');
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      expect(_testUtils.screen.getByText('Loading...')).toBeInTheDocument();
    });
    it('should handle error state correctly', () => {
      const mocks = [{
        request: {
          operationName: 'Businesses',
          query: _useGraphQL.BUSINESSES_QUERY,
          variables: {
            category: 'restaurant',
            limit: 10
          }
        },
        error: new Error('GraphQL Error')
      }];
      const TestComponent = () => {
        const {
          error
        } = (0, _useGraphQL.useBusinessesQuery)({
          category: 'restaurant',
          limit: 10
        });
        return /*#__PURE__*/_react.default.createElement("div", null, error ? `Error: ${error.message}` : 'No error');
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      expect(_testUtils.screen.getByText('Error: GraphQL Error')).toBeInTheDocument();
    });
    it('should pass correct variables to query', () => {
      const variables = {
        category: 'restaurant',
        limit: 20,
        offset: 10
      };
      const mocks = [{
        request: {
          operationName: 'Businesses',
          query: _useGraphQL.BUSINESSES_QUERY,
          variables
        },
        result: {
          data: {
            businesses: []
          }
        }
      }];
      const TestComponent = () => {
        const {
          data,
          loading,
          error
        } = (0, _useGraphQL.useBusinessesQuery)(variables);
        if (loading) return /*#__PURE__*/_react.default.createElement("div", null, "Loading...");
        if (error) return /*#__PURE__*/_react.default.createElement("div", null, "Error");
        return /*#__PURE__*/_react.default.createElement("div", null, "Loaded ", data?.businesses?.length);
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      return (0, _testUtils.waitFor)(() => {
        expect(_testUtils.screen.getByText('Loaded 0')).toBeInTheDocument();
      });
    });
  });
  describe('useBusinessDetailsQuery', () => {
    it('should return business details with proper structure', async () => {
      const mockBusinessDetails = {
        id: '1',
        name: 'Detailed Business',
        address: '123 Detail St',
        latitude: 40.7128,
        longitude: -74.0060,
        rating: 4.5,
        priceLevel: 3,
        distance: 500,
        category: 'restaurant',
        placeId: 'detailed_place_id',
        reviews: [{
          id: 'review1',
          author: 'John Doe',
          rating: 5,
          text: 'Great place!',
          time: '2023-01-01'
        }],
        photos: [{
          id: 'photo1',
          url: 'https://example.com/photo1.jpg',
          width: 800,
          height: 600
        }],
        hours: {
          monday: '9:00 AM - 10:00 PM',
          tuesday: '9:00 AM - 10:00 PM',
          wednesday: '9:00 AM - 10:00 PM',
          thursday: '9:00 AM - 10:00 PM',
          friday: '9:00 AM - 11:00 PM',
          saturday: '10:00 AM - 11:00 PM',
          sunday: '10:00 AM - 9:00 PM'
        }
      };
      const mocks = [{
        request: {
          operationName: 'BusinessDetails',
          query: _useGraphQL.BUSINESS_DETAILS_QUERY,
          variables: {
            id: '1'
          }
        },
        result: {
          data: {
            business: mockBusinessDetails
          }
        }
      }];
      const TestComponent = () => {
        const {
          data
        } = (0, _useGraphQL.useBusinessDetailsQuery)('1');
        return /*#__PURE__*/_react.default.createElement("div", null, data?.business && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", null, data.business.name), /*#__PURE__*/_react.default.createElement("p", null, data.business.address), /*#__PURE__*/_react.default.createElement("div", null, "Rating: ", data.business.rating), /*#__PURE__*/_react.default.createElement("div", null, "Reviews: ", data.business.reviews.length), /*#__PURE__*/_react.default.createElement("div", null, "Photos: ", data.business.photos.length)));
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      await (0, _testUtils.waitFor)(() => {
        expect(_testUtils.screen.getByText('Detailed Business')).toBeInTheDocument();
        expect(_testUtils.screen.getByText('123 Detail St')).toBeInTheDocument();
        expect(_testUtils.screen.getByText('Rating: 4.5')).toBeInTheDocument();
        expect(_testUtils.screen.getByText('Reviews: 1')).toBeInTheDocument();
        expect(_testUtils.screen.getByText('Photos: 1')).toBeInTheDocument();
      });
    });
  });
  describe('useNearbyBusinessesQuery', () => {
    it('should handle location-based queries correctly', async () => {
      const mockNearbyBusinesses = [{
        id: 'nearby1',
        name: 'Nearby Restaurant',
        distance: 200,
        latitude: 40.7128,
        longitude: -74.0060
      }, {
        id: 'nearby2',
        name: 'Another Nearby Place',
        distance: 500,
        latitude: 40.7130,
        longitude: -74.0062
      }];
      const mocks = [{
        request: {
          operationName: 'NearbyBusinesses',
          query: _useGraphQL.NEARBY_BUSINESSES_QUERY,
          variables: {
            lat: 40.7128,
            lng: -74.0060,
            radius: 1000,
            category: 'restaurant'
          }
        },
        result: {
          data: {
            nearbyBusinesses: mockNearbyBusinesses
          }
        }
      }];
      const TestComponent = () => {
        const {
          data
        } = (0, _useGraphQL.useNearbyBusinessesQuery)({
          latitude: 40.7128,
          longitude: -74.0060,
          radius: 1000,
          category: 'restaurant'
        });
        return /*#__PURE__*/_react.default.createElement("div", null, data?.nearbyBusinesses.map(business => /*#__PURE__*/_react.default.createElement("div", {
          key: business.id,
          "data-testid": `nearby-${business.id}`
        }, business.name, " - ", business.distance, "m")));
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      await (0, _testUtils.waitFor)(() => {
        expect(_testUtils.screen.getByTestId('nearby-nearby1')).toBeInTheDocument();
        expect(_testUtils.screen.getByTestId('nearby-nearby2')).toBeInTheDocument();
        expect(_testUtils.screen.getByText('Nearby Restaurant - 200m')).toBeInTheDocument();
        expect(_testUtils.screen.getByText('Another Nearby Place - 500m')).toBeInTheDocument();
      });
    });
    it('should sort businesses by distance', async () => {
      const unsortedBusinesses = [{
        id: 'far',
        name: 'Far Business',
        distance: 1000,
        latitude: 40.7128,
        longitude: -74.0060
      }, {
        id: 'close',
        name: 'Close Business',
        distance: 100,
        latitude: 40.7128,
        longitude: -74.0060
      }];
      const mocks = [{
        request: {
          operationName: 'NearbyBusinesses',
          query: _useGraphQL.NEARBY_BUSINESSES_QUERY,
          variables: {
            lat: 40.7128,
            lng: -74.0060,
            radius: 1000
          }
        },
        result: {
          data: {
            nearbyBusinesses: unsortedBusinesses
          }
        }
      }];
      const TestComponent = () => {
        const {
          data
        } = (0, _useGraphQL.useNearbyBusinessesQuery)({
          latitude: 40.7128,
          longitude: -74.0060,
          radius: 1000
        });
        return /*#__PURE__*/_react.default.createElement("div", null, data?.nearbyBusinesses.map(business => /*#__PURE__*/_react.default.createElement("div", {
          key: business.id
        }, business.name)));
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      await (0, _testUtils.waitFor)(() => {
        const businessElements = _testUtils.screen.getAllByText(/Business/);
        // Should be sorted by distance (close first)
        expect(businessElements[0]).toHaveTextContent('Close Business');
        expect(businessElements[1]).toHaveTextContent('Far Business');
      });
    });
  });
  describe('GraphQL Error Handling', () => {
    it('should handle network errors gracefully', () => {
      const mocks = [{
        request: {
          operationName: 'Businesses',
          query: _useGraphQL.BUSINESSES_QUERY,
          variables: {
            category: 'restaurant'
          }
        },
        error: new Error('Network error')
      }];
      const TestComponent = () => {
        const {
          error
        } = (0, _useGraphQL.useBusinessesQuery)({
          category: 'restaurant'
        });
        return /*#__PURE__*/_react.default.createElement("div", null, error ? 'Network Error Occurred' : 'No Error');
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      expect(_testUtils.screen.getByText('Network Error Occurred')).toBeInTheDocument();
    });
    it('should handle GraphQL validation errors', () => {
      const mocks = [{
        request: {
          operationName: 'Businesses',
          query: _useGraphQL.BUSINESSES_QUERY,
          variables: {
            category: 'invalid'
          }
        },
        result: {
          errors: [{
            message: 'Invalid category parameter',
            extensions: {
              code: 'VALIDATION_ERROR'
            }
          }]
        }
      }];
      const TestComponent = () => {
        const {
          error
        } = (0, _useGraphQL.useBusinessesQuery)({
          category: 'invalid'
        });
        return /*#__PURE__*/_react.default.createElement("div", null, error ? 'Validation Error' : 'No Error');
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      expect(_testUtils.screen.getByText('Validation Error')).toBeInTheDocument();
    });
  });
  describe('GraphQL Performance', () => {
    it('should cache query results appropriately', async () => {
      const mockData = {
        businesses: [{
          id: '1',
          name: 'Cached Business'
        }]
      };
      const mocks = [{
        request: {
          operationName: 'Businesses',
          query: _useGraphQL.BUSINESSES_QUERY,
          variables: {
            category: 'restaurant'
          }
        },
        result: {
          data: mockData
        }
      }];
      const TestComponent = () => {
        const {
          data
        } = (0, _useGraphQL.useBusinessesQuery)({
          category: 'restaurant'
        });
        return /*#__PURE__*/_react.default.createElement("div", null, data?.businesses[0]?.name);
      };
      const {
        rerender
      } = renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      await (0, _testUtils.waitFor)(() => {
        expect(_testUtils.screen.getByText('Cached Business')).toBeInTheDocument();
      });

      // Re-render should use cached/mocked data
      rerender(/*#__PURE__*/_react.default.createElement(_react2.ApolloProvider, {
        client: createClientWithMocks(mocks)
      }, /*#__PURE__*/_react.default.createElement(TestComponent, null)));
      expect(_testUtils.screen.getByText('Cached Business')).toBeInTheDocument();
    });
    it('should handle concurrent queries efficiently', async () => {
      const mockData = {
        businesses: [{
          id: '1',
          name: 'Concurrent Business'
        }]
      };
      const mocks = [{
        request: {
          operationName: 'Businesses',
          query: _useGraphQL.BUSINESSES_QUERY,
          variables: {
            category: 'restaurant'
          }
        },
        result: {
          data: mockData
        }
      }];
      const TestComponent = () => {
        const query1 = (0, _useGraphQL.useBusinessesQuery)({
          category: 'restaurant'
        });
        const query2 = (0, _useGraphQL.useBusinessesQuery)({
          category: 'restaurant'
        });
        return /*#__PURE__*/_react.default.createElement("div", null, query1.data?.businesses[0]?.name, query2.data?.businesses[0]?.name);
      };
      renderWithApollo(/*#__PURE__*/_react.default.createElement(TestComponent, null), mocks);
      await (0, _testUtils.waitFor)(() => {
        expect(_testUtils.screen.getByText('Concurrent BusinessConcurrent Business')).toBeInTheDocument();
      });

      // Apollo cache should serve both calls from the same result without extra mocks
      expect(_testUtils.screen.getByText('Concurrent BusinessConcurrent Business')).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,