4764de818aca67f895ae188ab0d23668
"use strict";

exports.__esModule = true;
exports.NEARBY_BUSINESSES_QUERY = exports.BUSINESS_DETAILS_QUERY = exports.BUSINESSES_QUERY = void 0;
exports.useBusinessDetailsQuery = useBusinessDetailsQuery;
exports.useBusinessesQuery = useBusinessesQuery;
exports.useNearbyBusinessesQuery = useNearbyBusinessesQuery;
var _client = require("@apollo/client");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore - some environments may not expose typed hooks from root, but runtime export exists

// Query documents exported for testing with MockedProvider
const BUSINESSES_QUERY = exports.BUSINESSES_QUERY = (0, _client.gql)`
  query Businesses($limit: Int, $category: String) {
    businesses(limit: $limit, category: $category) {
      id
      name
      category
    }
  }
`;
const BUSINESS_DETAILS_QUERY = exports.BUSINESS_DETAILS_QUERY = (0, _client.gql)`
  query BusinessDetails($id: ID!) {
    business(id: $id) {
      id
      name
      description
      rating
    }
  }
`;
const NEARBY_BUSINESSES_QUERY = exports.NEARBY_BUSINESSES_QUERY = (0, _client.gql)`
  query NearbyBusinesses($lat: Float!, $lng: Float!, $radius: Int) {
    nearbyBusinesses(lat: $lat, lng: $lng, radius: $radius) {
      id
      name
      distance
    }
  }
`;
function useBusinessesQuery(variables) {
  // Standard Apollo signature: useQuery(query, options)
  return (0, _client.useQuery)(BUSINESSES_QUERY, {
    variables
  });
}
function useBusinessDetailsQuery(idOrVars) {
  const variables = typeof idOrVars === 'string' ? {
    id: idOrVars
  } : idOrVars;
  return (0, _client.useQuery)(BUSINESS_DETAILS_QUERY, {
    variables,
    skip: !variables?.id
  });
}
function useNearbyBusinessesQuery(variables) {
  const normalized = 'lat' in variables ? variables : {
    lat: variables.latitude,
    lng: variables.longitude,
    radius: variables.radius,
    category: variables.category
  };
  const raw = (0, _client.useQuery)(NEARBY_BUSINESSES_QUERY, {
    variables: normalized,
    skip: !normalized?.lat || !normalized?.lng
  });

  // Sort nearbyBusinesses by distance ascending if present
  const sorted = raw && raw.data && Array.isArray(raw.data.nearbyBusinesses) ? {
    ...raw,
    data: {
      ...raw.data,
      nearbyBusinesses: [...raw.data.nearbyBusinesses].sort((a, b) => (a?.distance ?? 0) - (b?.distance ?? 0))
    }
  } : raw;
  return sorted;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2xpZW50IiwicmVxdWlyZSIsIkJVU0lORVNTRVNfUVVFUlkiLCJleHBvcnRzIiwiZ3FsIiwiQlVTSU5FU1NfREVUQUlMU19RVUVSWSIsIk5FQVJCWV9CVVNJTkVTU0VTX1FVRVJZIiwidXNlQnVzaW5lc3Nlc1F1ZXJ5IiwidmFyaWFibGVzIiwidXNlUXVlcnkiLCJ1c2VCdXNpbmVzc0RldGFpbHNRdWVyeSIsImlkT3JWYXJzIiwiaWQiLCJza2lwIiwidXNlTmVhcmJ5QnVzaW5lc3Nlc1F1ZXJ5Iiwibm9ybWFsaXplZCIsImxhdCIsImxhdGl0dWRlIiwibG5nIiwibG9uZ2l0dWRlIiwicmFkaXVzIiwiY2F0ZWdvcnkiLCJyYXciLCJzb3J0ZWQiLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwibmVhcmJ5QnVzaW5lc3NlcyIsInNvcnQiLCJhIiwiYiIsImRpc3RhbmNlIl0sInNvdXJjZXMiOlsidXNlR3JhcGhRTC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XHJcbi8vIEB0cy1pZ25vcmUgLSBzb21lIGVudmlyb25tZW50cyBtYXkgbm90IGV4cG9zZSB0eXBlZCBob29rcyBmcm9tIHJvb3QsIGJ1dCBydW50aW1lIGV4cG9ydCBleGlzdHNcclxuaW1wb3J0IHsgZ3FsLCB1c2VRdWVyeSB9IGZyb20gJ0BhcG9sbG8vY2xpZW50JztcclxuXHJcbi8vIFF1ZXJ5IGRvY3VtZW50cyBleHBvcnRlZCBmb3IgdGVzdGluZyB3aXRoIE1vY2tlZFByb3ZpZGVyXHJcbmV4cG9ydCBjb25zdCBCVVNJTkVTU0VTX1FVRVJZID0gZ3FsYFxyXG4gIHF1ZXJ5IEJ1c2luZXNzZXMoJGxpbWl0OiBJbnQsICRjYXRlZ29yeTogU3RyaW5nKSB7XHJcbiAgICBidXNpbmVzc2VzKGxpbWl0OiAkbGltaXQsIGNhdGVnb3J5OiAkY2F0ZWdvcnkpIHtcclxuICAgICAgaWRcclxuICAgICAgbmFtZVxyXG4gICAgICBjYXRlZ29yeVxyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBCVVNJTkVTU19ERVRBSUxTX1FVRVJZID0gZ3FsYFxyXG4gIHF1ZXJ5IEJ1c2luZXNzRGV0YWlscygkaWQ6IElEISkge1xyXG4gICAgYnVzaW5lc3MoaWQ6ICRpZCkge1xyXG4gICAgICBpZFxyXG4gICAgICBuYW1lXHJcbiAgICAgIGRlc2NyaXB0aW9uXHJcbiAgICAgIHJhdGluZ1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBORUFSQllfQlVTSU5FU1NFU19RVUVSWSA9IGdxbGBcclxuICBxdWVyeSBOZWFyYnlCdXNpbmVzc2VzKCRsYXQ6IEZsb2F0ISwgJGxuZzogRmxvYXQhLCAkcmFkaXVzOiBJbnQpIHtcclxuICAgIG5lYXJieUJ1c2luZXNzZXMobGF0OiAkbGF0LCBsbmc6ICRsbmcsIHJhZGl1czogJHJhZGl1cykge1xyXG4gICAgICBpZFxyXG4gICAgICBuYW1lXHJcbiAgICAgIGRpc3RhbmNlXHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJ1c2luZXNzZXNRdWVyeShcclxuICB2YXJpYWJsZXM/OiB7IGxpbWl0PzogbnVtYmVyOyBjYXRlZ29yeT86IHN0cmluZzsgb2Zmc2V0PzogbnVtYmVyIH1cclxuKSB7XHJcbiAgLy8gU3RhbmRhcmQgQXBvbGxvIHNpZ25hdHVyZTogdXNlUXVlcnkocXVlcnksIG9wdGlvbnMpXHJcbiAgcmV0dXJuICh1c2VRdWVyeSBhcyBhbnkpKEJVU0lORVNTRVNfUVVFUlksIHsgdmFyaWFibGVzIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQnVzaW5lc3NEZXRhaWxzUXVlcnkoaWRPclZhcnM6IHN0cmluZyB8IHsgaWQ6IHN0cmluZyB9KSB7XHJcbiAgY29uc3QgdmFyaWFibGVzID0gdHlwZW9mIGlkT3JWYXJzID09PSAnc3RyaW5nJyA/IHsgaWQ6IGlkT3JWYXJzIH0gOiBpZE9yVmFycztcclxuICByZXR1cm4gKHVzZVF1ZXJ5IGFzIGFueSkoQlVTSU5FU1NfREVUQUlMU19RVUVSWSwgeyB2YXJpYWJsZXMsIHNraXA6ICF2YXJpYWJsZXM/LmlkIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlTmVhcmJ5QnVzaW5lc3Nlc1F1ZXJ5KFxyXG4gIHZhcmlhYmxlczpcclxuICAgIHwgeyBsYXQ6IG51bWJlcjsgbG5nOiBudW1iZXI7IHJhZGl1cz86IG51bWJlcjsgY2F0ZWdvcnk/OiBzdHJpbmcgfVxyXG4gICAgfCB7IGxhdGl0dWRlOiBudW1iZXI7IGxvbmdpdHVkZTogbnVtYmVyOyByYWRpdXM/OiBudW1iZXI7IGNhdGVnb3J5Pzogc3RyaW5nIH1cclxuKSB7XHJcbiAgY29uc3Qgbm9ybWFsaXplZCA9ICdsYXQnIGluIHZhcmlhYmxlc1xyXG4gICAgPyB2YXJpYWJsZXNcclxuICAgIDogeyBsYXQ6ICh2YXJpYWJsZXMgYXMgYW55KS5sYXRpdHVkZSwgbG5nOiAodmFyaWFibGVzIGFzIGFueSkubG9uZ2l0dWRlLCByYWRpdXM6ICh2YXJpYWJsZXMgYXMgYW55KS5yYWRpdXMsIGNhdGVnb3J5OiAodmFyaWFibGVzIGFzIGFueSkuY2F0ZWdvcnkgfTtcclxuXHJcbiAgY29uc3QgcmF3ID0gKHVzZVF1ZXJ5IGFzIGFueSkoTkVBUkJZX0JVU0lORVNTRVNfUVVFUlksIHsgdmFyaWFibGVzOiBub3JtYWxpemVkLCBza2lwOiAhbm9ybWFsaXplZD8ubGF0IHx8ICFub3JtYWxpemVkPy5sbmcgfSk7XHJcblxyXG4gIC8vIFNvcnQgbmVhcmJ5QnVzaW5lc3NlcyBieSBkaXN0YW5jZSBhc2NlbmRpbmcgaWYgcHJlc2VudFxyXG4gIGNvbnN0IHNvcnRlZCA9IHJhdyAmJiByYXcuZGF0YSAmJiBBcnJheS5pc0FycmF5KHJhdy5kYXRhLm5lYXJieUJ1c2luZXNzZXMpXHJcbiAgICA/IHtcclxuICAgICAgICAuLi5yYXcsXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgLi4ucmF3LmRhdGEsXHJcbiAgICAgICAgICBuZWFyYnlCdXNpbmVzc2VzOiBbLi4ucmF3LmRhdGEubmVhcmJ5QnVzaW5lc3Nlc10uc29ydCgoYTogYW55LCBiOiBhbnkpID0+IChhPy5kaXN0YW5jZSA/PyAwKSAtIChiPy5kaXN0YW5jZSA/PyAwKSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIDogcmF3O1xyXG4gIHJldHVybiBzb3J0ZWQ7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBRkE7QUFDQTs7QUFHQTtBQUNPLE1BQU1DLGdCQUFnQixHQUFBQyxPQUFBLENBQUFELGdCQUFBLEdBQUcsSUFBQUUsV0FBRztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFFTSxNQUFNQyxzQkFBc0IsR0FBQUYsT0FBQSxDQUFBRSxzQkFBQSxHQUFHLElBQUFELFdBQUc7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFFTSxNQUFNRSx1QkFBdUIsR0FBQUgsT0FBQSxDQUFBRyx1QkFBQSxHQUFHLElBQUFGLFdBQUc7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBRU0sU0FBU0csa0JBQWtCQSxDQUNoQ0MsU0FBa0UsRUFDbEU7RUFDQTtFQUNBLE9BQU8sSUFBQ0MsZ0JBQVEsRUFBU1AsZ0JBQWdCLEVBQUU7SUFBRU07RUFBVSxDQUFDLENBQUM7QUFDM0Q7QUFFTyxTQUFTRSx1QkFBdUJBLENBQUNDLFFBQWlDLEVBQUU7RUFDekUsTUFBTUgsU0FBUyxHQUFHLE9BQU9HLFFBQVEsS0FBSyxRQUFRLEdBQUc7SUFBRUMsRUFBRSxFQUFFRDtFQUFTLENBQUMsR0FBR0EsUUFBUTtFQUM1RSxPQUFPLElBQUNGLGdCQUFRLEVBQVNKLHNCQUFzQixFQUFFO0lBQUVHLFNBQVM7SUFBRUssSUFBSSxFQUFFLENBQUNMLFNBQVMsRUFBRUk7RUFBRyxDQUFDLENBQUM7QUFDdkY7QUFFTyxTQUFTRSx3QkFBd0JBLENBQ3RDTixTQUUrRSxFQUMvRTtFQUNBLE1BQU1PLFVBQVUsR0FBRyxLQUFLLElBQUlQLFNBQVMsR0FDakNBLFNBQVMsR0FDVDtJQUFFUSxHQUFHLEVBQUdSLFNBQVMsQ0FBU1MsUUFBUTtJQUFFQyxHQUFHLEVBQUdWLFNBQVMsQ0FBU1csU0FBUztJQUFFQyxNQUFNLEVBQUdaLFNBQVMsQ0FBU1ksTUFBTTtJQUFFQyxRQUFRLEVBQUdiLFNBQVMsQ0FBU2E7RUFBUyxDQUFDO0VBRXJKLE1BQU1DLEdBQUcsR0FBRyxJQUFDYixnQkFBUSxFQUFTSCx1QkFBdUIsRUFBRTtJQUFFRSxTQUFTLEVBQUVPLFVBQVU7SUFBRUYsSUFBSSxFQUFFLENBQUNFLFVBQVUsRUFBRUMsR0FBRyxJQUFJLENBQUNELFVBQVUsRUFBRUc7RUFBSSxDQUFDLENBQUM7O0VBRTdIO0VBQ0EsTUFBTUssTUFBTSxHQUFHRCxHQUFHLElBQUlBLEdBQUcsQ0FBQ0UsSUFBSSxJQUFJQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0osR0FBRyxDQUFDRSxJQUFJLENBQUNHLGdCQUFnQixDQUFDLEdBQ3RFO0lBQ0UsR0FBR0wsR0FBRztJQUNORSxJQUFJLEVBQUU7TUFDSixHQUFHRixHQUFHLENBQUNFLElBQUk7TUFDWEcsZ0JBQWdCLEVBQUUsQ0FBQyxHQUFHTCxHQUFHLENBQUNFLElBQUksQ0FBQ0csZ0JBQWdCLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUNDLENBQU0sRUFBRUMsQ0FBTSxLQUFLLENBQUNELENBQUMsRUFBRUUsUUFBUSxJQUFJLENBQUMsS0FBS0QsQ0FBQyxFQUFFQyxRQUFRLElBQUksQ0FBQyxDQUFDO0lBQ25IO0VBQ0YsQ0FBQyxHQUNEVCxHQUFHO0VBQ1AsT0FBT0MsTUFBTTtBQUNmIiwiaWdub3JlTGlzdCI6W119