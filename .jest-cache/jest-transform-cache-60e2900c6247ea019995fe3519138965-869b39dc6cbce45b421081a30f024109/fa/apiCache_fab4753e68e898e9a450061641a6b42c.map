{"version":3,"names":["AdvancedAPICache","cache","Map","pendingRequests","stats","hits","misses","evictions","sets","deletes","size","itemCount","config","maxSize","defaultTTL","enablePersistence","persistenceKey","enableCompression","lruEnabled","constructor","window","loadPersistedCache","global","setInterval","cleanup","persistCache","generateKey","params","prefix","sortedParams","Object","keys","sort","reduce","result","key","paramString","JSON","stringify","simpleHash","str","hash","i","length","char","charCodeAt","Math","abs","toString","estimateSize","data","get","entry","now","Date","timestamp","ttl","delete","accessCount","lastAccessed","set","options","requiredSpace","evictLRU","tags","oldEntry","entries","Array","from","a","b","freedSpace","clearByTags","cleared","some","tag","includes","clear","dedupe","requestFn","useCache","cached","pending","promise","then","finally","getStats","getHitRate","total","localStorage","persistableData","filter","map","setItem","error","console","warn","persisted","getItem","parse","removeItem","log","warmup","warmupPromises","has","Promise","all","advancedApiCache","exports","apiCache","warmupCache","frequentlyUsedKeys","getCacheMetrics","hitRate","toFixed","sizeFormatted","efficiency"],"sources":["apiCache.ts"],"sourcesContent":["// Advanced Redis-like in-memory cache with LRU eviction, persistence, and advanced features\r\ninterface CacheEntry<T = unknown> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number;\r\n  accessCount: number;\r\n  lastAccessed: number;\r\n  size: number; // Estimated size in bytes\r\n  tags?: string[]; // For cache invalidation by tags\r\n}\r\n\r\ninterface CacheStats {\r\n  hits: number;\r\n  misses: number;\r\n  evictions: number;\r\n  sets: number;\r\n  deletes: number;\r\n  size: number; // Total cache size in bytes\r\n  itemCount: number;\r\n}\r\n\r\ninterface CacheConfig {\r\n  maxSize: number; // Maximum cache size in bytes\r\n  defaultTTL: number; // Default TTL in milliseconds\r\n  enablePersistence: boolean;\r\n  persistenceKey: string;\r\n  enableCompression: boolean;\r\n  lruEnabled: boolean;\r\n}\r\n\r\nclass AdvancedAPICache {\r\n  private cache = new Map<string, CacheEntry>();\r\n  private pendingRequests = new Map<string, Promise<unknown>>();\r\n  private stats: CacheStats = {\r\n    hits: 0,\r\n    misses: 0,\r\n    evictions: 0,\r\n    sets: 0,\r\n    deletes: 0,\r\n    size: 0,\r\n    itemCount: 0\r\n  };\r\n\r\n  private config: CacheConfig = {\r\n    maxSize: 50 * 1024 * 1024, // 50MB default\r\n    defaultTTL: 5 * 60 * 1000, // 5 minutes\r\n    enablePersistence: true,\r\n    persistenceKey: 'api-cache-persistence',\r\n    enableCompression: false,\r\n    lruEnabled: true\r\n  };\r\n\r\n  constructor(config?: Partial<CacheConfig>) {\r\n    if (config) {\r\n      this.config = { ...this.config, ...config };\r\n    }\r\n\r\n    // Load persisted cache on initialization\r\n    if (this.config.enablePersistence && typeof window !== 'undefined') {\r\n      this.loadPersistedCache();\r\n    }\r\n\r\n    // Set up periodic cleanup and persistence\r\n    if (typeof global !== 'undefined') {\r\n      setInterval(() => {\r\n        this.cleanup();\r\n        if (this.config.enablePersistence) {\r\n          this.persistCache();\r\n        }\r\n      }, 60000); // Every minute\r\n    }\r\n  }\r\n\r\n  // Generate cache key from request parameters with advanced hashing\r\n  generateKey(params: Record<string, unknown>, prefix = 'api'): string {\r\n    const sortedParams = Object.keys(params)\r\n      .sort()\r\n      .reduce((result, key) => {\r\n        result[key] = params[key];\r\n        return result;\r\n      }, {} as Record<string, unknown>);\r\n\r\n    const paramString = JSON.stringify(sortedParams);\r\n    return `${prefix}:${this.simpleHash(paramString)}`;\r\n  }\r\n\r\n  // Simple hash function for cache keys\r\n  private simpleHash(str: string): string {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash).toString(36);\r\n  }\r\n\r\n  // Estimate size of data in bytes\r\n  private estimateSize(data: unknown): number {\r\n    const str = JSON.stringify(data);\r\n    return str ? str.length : 0; // Rough estimate: 1 byte per character\r\n  }\r\n\r\n  // Get cached data with LRU tracking\r\n  get<T = unknown>(key: string): T | null {\r\n    const entry = this.cache.get(key);\r\n    if (!entry) {\r\n      this.stats.misses++;\r\n      return null;\r\n    }\r\n\r\n    const now = Date.now();\r\n    if (now - entry.timestamp >= entry.ttl) {\r\n      this.cache.delete(key);\r\n      this.stats.size -= entry.size;\r\n      this.stats.itemCount--;\r\n      this.stats.misses++;\r\n      return null;\r\n    }\r\n\r\n    // Update LRU tracking\r\n    entry.accessCount++;\r\n    entry.lastAccessed = now;\r\n    this.stats.hits++;\r\n\r\n    return entry.data as T;\r\n  }\r\n\r\n  // Set cache entry with advanced features\r\n  set<T = unknown>(\r\n    key: string,\r\n    data: T,\r\n    options: {\r\n      ttl?: number;\r\n      tags?: string[];\r\n      compress?: boolean;\r\n    } = {}\r\n  ): void {\r\n    const ttl = options.ttl || this.config.defaultTTL;\r\n    const size = this.estimateSize(data);\r\n    const now = Date.now();\r\n\r\n    // Check if we need to evict entries to make room\r\n    if (this.stats.size + size > this.config.maxSize) {\r\n      const requiredSpace = this.stats.size + size - this.config.maxSize;\r\n      this.evictLRU(requiredSpace);\r\n    }\r\n\r\n    const entry: CacheEntry<T> = {\r\n      data,\r\n      timestamp: now,\r\n      ttl,\r\n      accessCount: 0,\r\n      lastAccessed: now,\r\n      size,\r\n      tags: options.tags\r\n    };\r\n\r\n    // Remove old entry if it exists\r\n    const oldEntry = this.cache.get(key);\r\n    if (oldEntry) {\r\n      this.stats.size -= oldEntry.size;\r\n      this.stats.itemCount--;\r\n    }\r\n\r\n    this.cache.set(key, entry);\r\n    this.stats.size += size;\r\n    this.stats.itemCount++;\r\n    this.stats.sets++;\r\n  }\r\n\r\n  // LRU eviction\r\n  private evictLRU(requiredSpace: number): void {\r\n    if (!this.config.lruEnabled) return;\r\n\r\n    const entries = Array.from(this.cache.entries())\r\n      .sort(([, a], [, b]) => {\r\n        // Sort by access count, then by last accessed time\r\n        if (a.accessCount !== b.accessCount) {\r\n          return a.accessCount - b.accessCount;\r\n        }\r\n        return a.lastAccessed - b.lastAccessed;\r\n      });\r\n\r\n    let freedSpace = 0;\r\n    for (const [key, entry] of entries) {\r\n      if (freedSpace >= requiredSpace) break;\r\n\r\n      this.cache.delete(key);\r\n      this.stats.size -= entry.size;\r\n      this.stats.itemCount--;\r\n      this.stats.evictions++;\r\n      freedSpace += entry.size;\r\n    }\r\n  }\r\n\r\n  // Delete cache entry\r\n  delete(key: string): boolean {\r\n    const entry = this.cache.get(key);\r\n    if (entry) {\r\n      this.cache.delete(key);\r\n      this.stats.size -= entry.size;\r\n      this.stats.itemCount--;\r\n      this.stats.deletes++;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Clear cache by tags\r\n  clearByTags(tags: string[]): number {\r\n    let cleared = 0;\r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (entry.tags && entry.tags.some(tag => tags.includes(tag))) {\r\n        this.cache.delete(key);\r\n        this.stats.size -= entry.size;\r\n        this.stats.itemCount--;\r\n        this.stats.deletes++;\r\n        cleared++;\r\n      }\r\n    }\r\n    return cleared;\r\n  }\r\n\r\n  // Clear all cache\r\n  clear(): void {\r\n    this.cache.clear();\r\n    this.stats.size = 0;\r\n    this.stats.itemCount = 0;\r\n    this.stats.deletes += this.stats.itemCount;\r\n  }\r\n\r\n  // Handle request deduplication with enhanced error handling\r\n  async dedupe<T>(\r\n    key: string,\r\n    requestFn: () => Promise<T>,\r\n    options: {\r\n      ttl?: number;\r\n      tags?: string[];\r\n      useCache?: boolean;\r\n    } = {}\r\n  ): Promise<T> {\r\n    // Check cache first if enabled\r\n    if (options.useCache !== false) {\r\n      const cached = this.get<T>(key);\r\n      if (cached !== null) {\r\n        return cached;\r\n      }\r\n    }\r\n\r\n    // Check if request is already pending\r\n    const pending = this.pendingRequests.get(key);\r\n    if (pending) {\r\n      return pending as Promise<T>;\r\n    }\r\n\r\n    // Execute request and cache the promise\r\n    const promise = requestFn()\r\n      .then(result => {\r\n        // Cache successful results\r\n        if (options.useCache !== false) {\r\n          this.set(key, result, {\r\n            ttl: options.ttl,\r\n            tags: options.tags\r\n          });\r\n        }\r\n        return result;\r\n      })\r\n      .finally(() => {\r\n        this.pendingRequests.delete(key);\r\n      });\r\n\r\n    this.pendingRequests.set(key, promise);\r\n    return promise;\r\n  }\r\n\r\n  // Get cache statistics\r\n  getStats(): CacheStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  // Get cache hit rate\r\n  getHitRate(): number {\r\n    const total = this.stats.hits + this.stats.misses;\r\n    return total > 0 ? this.stats.hits / total : 0;\r\n  }\r\n\r\n  // Cleanup expired entries\r\n  cleanup(): void {\r\n    const now = Date.now();\r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (now - entry.timestamp > entry.ttl) {\r\n        this.cache.delete(key);\r\n        this.stats.size -= entry.size;\r\n        this.stats.itemCount--;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Persist cache to localStorage\r\n  private persistCache(): void {\r\n    if (typeof window === 'undefined' || !window.localStorage) return;\r\n\r\n    try {\r\n      const persistableData = Array.from(this.cache.entries())\r\n        .filter(([, entry]) => {\r\n          // Only persist entries that haven't expired and aren't too large\r\n          const now = Date.now();\r\n          return (now - entry.timestamp < entry.ttl) && entry.size < 1024 * 1024; // < 1MB\r\n        })\r\n        .map(([key, entry]) => [key, {\r\n          data: entry.data,\r\n          timestamp: entry.timestamp,\r\n          ttl: entry.ttl,\r\n          accessCount: entry.accessCount,\r\n          lastAccessed: entry.lastAccessed,\r\n          size: entry.size,\r\n          tags: entry.tags\r\n        }]);\r\n\r\n      localStorage.setItem(this.config.persistenceKey, JSON.stringify({\r\n        data: persistableData,\r\n        timestamp: Date.now()\r\n      }));\r\n    } catch (error) {\r\n      console.warn('Failed to persist cache:', error);\r\n    }\r\n  }\r\n\r\n  // Load persisted cache from localStorage\r\n  private loadPersistedCache(): void {\r\n    if (typeof window === 'undefined' || !window.localStorage) return;\r\n\r\n    try {\r\n      const persisted = localStorage.getItem(this.config.persistenceKey);\r\n      if (!persisted) return;\r\n\r\n      const { data, timestamp } = JSON.parse(persisted);\r\n      const now = Date.now();\r\n\r\n      // Only load if persisted within last 24 hours\r\n      if (now - timestamp > 24 * 60 * 60 * 1000) {\r\n        localStorage.removeItem(this.config.persistenceKey);\r\n        return;\r\n      }\r\n\r\n      for (const [key, entry] of data) {\r\n        // Check if entry is still valid\r\n        if (now - entry.timestamp < entry.ttl) {\r\n          this.cache.set(key, entry);\r\n          this.stats.size += entry.size;\r\n          this.stats.itemCount++;\r\n        }\r\n      }\r\n\r\n      console.log(`Loaded ${this.stats.itemCount} persisted cache entries`);\r\n    } catch (error) {\r\n      console.warn('Failed to load persisted cache:', error);\r\n      localStorage.removeItem(this.config.persistenceKey);\r\n    }\r\n  }\r\n\r\n  // Warm up cache with frequently accessed data\r\n  async warmup(keys: string[]): Promise<void> {\r\n    const warmupPromises = keys.map(async (key) => {\r\n      // This would typically fetch from a fast source or pre-computed data\r\n      // For now, just ensure the key exists in cache\r\n      return this.cache.has(key);\r\n    });\r\n\r\n    await Promise.all(warmupPromises);\r\n  }\r\n}\r\n\r\n// Global advanced cache instance with optimized settings\r\nexport const advancedApiCache = new AdvancedAPICache({\r\n  maxSize: 100 * 1024 * 1024, // 100MB for better performance\r\n  defaultTTL: 10 * 60 * 1000, // 10 minutes for better cache hit rates\r\n  enablePersistence: true,\r\n  persistenceKey: 'points-companion-cache-v2',\r\n  enableCompression: false, // Can be enabled later with compression library\r\n  lruEnabled: true\r\n});\r\n\r\n// Legacy cache instance for backward compatibility\r\nexport const apiCache = advancedApiCache;\r\n\r\n// Cache warming utility\r\nexport const warmupCache = async (frequentlyUsedKeys: string[]) => {\r\n  await advancedApiCache.warmup(frequentlyUsedKeys);\r\n};\r\n\r\n// Cache monitoring utility\r\nexport const getCacheMetrics = () => {\r\n  const stats = advancedApiCache.getStats();\r\n  const hitRate = advancedApiCache.getHitRate();\r\n\r\n  return {\r\n    ...stats,\r\n    hitRate: `${(hitRate * 100).toFixed(2)}%`,\r\n    sizeFormatted: `${(stats.size / 1024 / 1024).toFixed(2)}MB`,\r\n    efficiency: hitRate > 0.8 ? 'Excellent' : hitRate > 0.6 ? 'Good' : 'Needs Optimization'\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]}