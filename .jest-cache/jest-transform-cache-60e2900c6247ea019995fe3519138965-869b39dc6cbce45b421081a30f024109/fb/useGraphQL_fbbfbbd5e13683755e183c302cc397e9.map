{"version":3,"names":["Apollo","_interopRequireWildcard","require","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","BUSINESSES_QUERY","exports","gql","BUSINESS_DETAILS_QUERY","NEARBY_BUSINESSES_QUERY","useBusinessesQuery","variables","useQuery","useBusinessDetailsQuery","idOrVars","id","skip","useNearbyBusinessesQuery","normalized","lat","latitude","lng","longitude","radius","category","raw","sorted","data","Array","isArray","nearbyBusinesses","sort","a","b","distance"],"sources":["useGraphQL.ts"],"sourcesContent":["import * as Apollo from '@apollo/client';\r\n\r\n// Query documents exported for testing with MockedProvider\r\nexport const BUSINESSES_QUERY = Apollo.gql`\r\n  query Businesses($limit: Int, $category: String) {\r\n    businesses(limit: $limit, category: $category) {\r\n      id\r\n      name\r\n      category\r\n    }\r\n  }\r\n`;\r\n\r\nexport const BUSINESS_DETAILS_QUERY = Apollo.gql`\r\n  query BusinessDetails($id: ID!) {\r\n    business(id: $id) {\r\n      id\r\n      name\r\n      description\r\n      rating\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NEARBY_BUSINESSES_QUERY = Apollo.gql`\r\n  query NearbyBusinesses($lat: Float!, $lng: Float!, $radius: Int) {\r\n    nearbyBusinesses(lat: $lat, lng: $lng, radius: $radius) {\r\n      id\r\n      name\r\n      distance\r\n    }\r\n  }\r\n`;\r\n\r\nexport function useBusinessesQuery(\r\n  variables?: { limit?: number; category?: string; offset?: number }\r\n) {\r\n  // Standard Apollo signature: useQuery(query, options)\r\n  return (Apollo as any).useQuery(BUSINESSES_QUERY, { variables });\r\n}\r\n\r\nexport function useBusinessDetailsQuery(idOrVars: string | { id: string }) {\r\n  const variables = typeof idOrVars === 'string' ? { id: idOrVars } : idOrVars;\r\n  return (Apollo as any).useQuery(BUSINESS_DETAILS_QUERY, { variables, skip: !variables?.id });\r\n}\r\n\r\nexport function useNearbyBusinessesQuery(\r\n  variables:\r\n    | { lat: number; lng: number; radius?: number; category?: string }\r\n    | { latitude: number; longitude: number; radius?: number; category?: string }\r\n) {\r\n  const normalized = 'lat' in variables\r\n    ? variables\r\n    : { lat: (variables as any).latitude, lng: (variables as any).longitude, radius: (variables as any).radius, category: (variables as any).category };\r\n\r\n  const raw = (Apollo as any).useQuery(NEARBY_BUSINESSES_QUERY, { variables: normalized, skip: !normalized?.lat || !normalized?.lng });\r\n\r\n  // Sort nearbyBusinesses by distance ascending if present\r\n  const sorted = raw && raw.data && Array.isArray(raw.data.nearbyBusinesses)\r\n    ? {\r\n        ...raw,\r\n        data: {\r\n          ...raw.data,\r\n          nearbyBusinesses: [...raw.data.nearbyBusinesses].sort((a: any, b: any) => (a?.distance ?? 0) - (b?.distance ?? 0))\r\n        }\r\n      }\r\n    : raw;\r\n  return sorted;\r\n}\r\n"],"mappings":"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","ignoreList":[]}